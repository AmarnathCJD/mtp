package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"unicode"

	"github.com/dave/jennifer/jen"
	"github.com/k0kubun/pp"
	"github.com/xelaj/go-dry"
)

func normalizeID(s string, isType bool) string {
	isVector := strings.HasPrefix(s, "Vector<")
	s = strings.TrimPrefix(s, "Vector<")
	s = strings.TrimSuffix(s, ">")
	prefix := ""
	constructorName := s
	index := strings.Index(s, ".")
	if index != -1 {
		prefix = s[:index]
		constructorName = s[index+1:]
		if !unicode.IsUpper([]rune(constructorName)[0]) && isType {
			pp.Println(s)
			panic("something strange, object doesn't look like interface")
		}
	}

	if !unicode.IsUpper([]rune(constructorName)[0]) {
		newOne := []rune(constructorName)
		newOne[0] = unicode.ToUpper(newOne[0])
		constructorName = string(newOne)
	}

	s = prefix + constructorName
	if isVector {
		s = "[]" + s
	}

	if !unicode.IsUpper([]rune(s)[0]) {
		newOne := []rune(s)
		newOne[0] = unicode.ToUpper(newOne[0])
		s = string(newOne)
	}

	switch s {
	case "type",
		"default",
		"range":
		return "_" + s
	default:
		return s
	}
}

const helpMsg = `generate-tl-files
usage: generate-tl-files input_file.tl output_dir/

THIS TOOL IS USING ONLY FOR AUTOMATIC CODE
GENERATION, DO NOT GENERATE FILES BY HAND!

No, seriously. Don't. go generate is amazing. You
are amazing too, but lesser üòè
`

func main() {
	// TODO: use awesome github.com/xelaj/args lib for amazing cli insead this shit
	if dry.StringInSlice("--help", os.Args) {
		fmt.Println(helpMsg)
		os.Exit(0)
	}

	if len(os.Args) < 2 {
		fmt.Println(helpMsg)
		os.Exit(1)
	}

	inputFilePath := os.Args[1]
	if !dry.FileExists(inputFilePath) {
		fmt.Println("'"+inputFilePath+"'", "file not found. Are you sure, that it's exist?")
		os.Exit(1)
	}

	outputDir := os.Args[2]
	if !dry.FileExists(inputFilePath) {
		err := os.MkdirAll(outputDir, 0775)
		dry.PanicIfErr(err)
	}

	if !dry.FileIsDir(outputDir) {
		fmt.Println("'"+inputFilePath+"'", "is not a directory. Check output path twice, litle hacker üëæüëæüëæ")
		os.Exit(1)
	}

	data, err := ioutil.ReadFile(inputFilePath)
	dry.PanicIfErr(err)

	res, err := ParseTL(string(data))
	dry.PanicIfErr(err)

	s, err := FileFromTlSchema(res)
	dry.PanicIfErr(err)

	GenerateAndWirteTo(GenerateEnumDefinitions, s, filepath.Join(outputDir, "enums.go"))
	GenerateAndWirteTo(GenerateSpecificStructs, s, filepath.Join(outputDir, "types.go"))
	GenerateAndWirteTo(GenerateInterfaces, s, filepath.Join(outputDir, "interfaces.go"))
	GenerateAndWirteTo(GenerateMethods, s, filepath.Join(outputDir, "methods.go"))
	GenerateAndWirteTo(GenerateConstructorRouter, s, filepath.Join(outputDir, "constructor.go"))

}

func GenerateAndWirteTo(f func(file *jen.File, data *FileStructure) error, data *FileStructure, storeTo string) {
	file := jen.NewFile("telegram")
	file.HeaderComment("Code generated by generate-tl-files; DO NOT EDIT.")

	file.ImportAlias("github.com/xelaj/go-dry", "dry")

	err := f(file, data)
	dry.PanicIfErr(err)

	buf := bytes.NewBuffer([]byte{})
	err = file.Render(buf)
	if err != nil {
		pp.Fprintln(os.Stderr, err)
		panic("–æ—à–∏–±–∫–∞!")
	}
	err = ioutil.WriteFile(storeTo, buf.Bytes(), 0644)
	dry.PanicIfErr(err)
}
