// Code generated by generate-tl-files; DO NOT EDIT.

package telegram

import (
	validator "github.com/go-playground/validator"
	errors "github.com/pkg/errors"
	zero "github.com/vikyd/zero"
	dry "github.com/xelaj/go-dry"
	mtproto "github.com/xelaj/mtproto"
	"reflect"
)

type AuthSendCodeParams struct {
	PhoneNumber string        `validate:"required"`
	ApiId       int32         `validate:"required"`
	ApiHash     string        `validate:"required"`
	Settings    *CodeSettings `validate:"required"`
}

func (e *AuthSendCodeParams) CRC() uint32 {
	return uint32(0xa677244f)
}

func (e *AuthSendCode) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.PhoneNumber)
	buf.PutInt(e.ApiId)
	buf.PutString(e.ApiHash)
	buf.PutRawBytes(e.Settings.Encode())
	return buf.Result()
}

func (с *Client) AuthSendCode(params *AuthSendCodeParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AuthSendCode")
	}

	resp, ok := data.(*AuthSentCode)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AuthSignUpParams struct {
	PhoneNumber   string `validate:"required"`
	PhoneCodeHash string `validate:"required"`
	FirstName     string `validate:"required"`
	LastName      string `validate:"required"`
}

func (e *AuthSignUpParams) CRC() uint32 {
	return uint32(0x80eee427)
}

func (e *AuthSignUp) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.PhoneNumber)
	buf.PutString(e.PhoneCodeHash)
	buf.PutString(e.FirstName)
	buf.PutString(e.LastName)
	return buf.Result()
}

func (с *Client) AuthSignUp(params *AuthSignUpParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AuthSignUp")
	}

	resp, ok := data.(AuthAuthorization)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AuthSignInParams struct {
	PhoneNumber   string `validate:"required"`
	PhoneCodeHash string `validate:"required"`
	PhoneCode     string `validate:"required"`
}

func (e *AuthSignInParams) CRC() uint32 {
	return uint32(0xbcd51581)
}

func (e *AuthSignIn) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.PhoneNumber)
	buf.PutString(e.PhoneCodeHash)
	buf.PutString(e.PhoneCode)
	return buf.Result()
}

func (с *Client) AuthSignIn(params *AuthSignInParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AuthSignIn")
	}

	resp, ok := data.(AuthAuthorization)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AuthLogOutParams struct{}

func (e *AuthLogOutParams) CRC() uint32 {
	return uint32(0x5717da40)
}

func (e *AuthLogOut) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) AuthLogOut() {
	data, err := c.MakeRequest(&AuthLogOutParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning AuthLogOut")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AuthResetAuthorizationsParams struct{}

func (e *AuthResetAuthorizationsParams) CRC() uint32 {
	return uint32(0x9fab0d1a)
}

func (e *AuthResetAuthorizations) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) AuthResetAuthorizations() {
	data, err := c.MakeRequest(&AuthResetAuthorizationsParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning AuthResetAuthorizations")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AuthExportAuthorizationParams struct {
	DcId int32 `validate:"required"`
}

func (e *AuthExportAuthorizationParams) CRC() uint32 {
	return uint32(0xe5bfffcd)
}

func (e *AuthExportAuthorization) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.DcId)
	return buf.Result()
}

func (с *Client) AuthExportAuthorization(params *AuthExportAuthorizationParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AuthExportAuthorization")
	}

	resp, ok := data.(*AuthExportedAuthorization)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AuthImportAuthorizationParams struct {
	Id    int32  `validate:"required"`
	Bytes []byte `validate:"required"`
}

func (e *AuthImportAuthorizationParams) CRC() uint32 {
	return uint32(0xe3ef9613)
}

func (e *AuthImportAuthorization) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Id)
	buf.PutMessage(e.Bytes)
	return buf.Result()
}

func (с *Client) AuthImportAuthorization(params *AuthImportAuthorizationParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AuthImportAuthorization")
	}

	resp, ok := data.(AuthAuthorization)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AuthBindTempAuthKeyParams struct {
	PermAuthKeyId    int64  `validate:"required"`
	Nonce            int64  `validate:"required"`
	ExpiresAt        int32  `validate:"required"`
	EncryptedMessage []byte `validate:"required"`
}

func (e *AuthBindTempAuthKeyParams) CRC() uint32 {
	return uint32(0xcdd42a05)
}

func (e *AuthBindTempAuthKey) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.PermAuthKeyId)
	buf.PutLong(e.Nonce)
	buf.PutInt(e.ExpiresAt)
	buf.PutMessage(e.EncryptedMessage)
	return buf.Result()
}

func (с *Client) AuthBindTempAuthKey(params *AuthBindTempAuthKeyParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AuthBindTempAuthKey")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AuthImportBotAuthorizationParams struct {
	Flags        int32  `validate:"required"`
	ApiId        int32  `validate:"required"`
	ApiHash      string `validate:"required"`
	BotAuthToken string `validate:"required"`
}

func (e *AuthImportBotAuthorizationParams) CRC() uint32 {
	return uint32(0x67a3ff2c)
}

func (e *AuthImportBotAuthorization) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Flags)
	buf.PutInt(e.ApiId)
	buf.PutString(e.ApiHash)
	buf.PutString(e.BotAuthToken)
	return buf.Result()
}

func (с *Client) AuthImportBotAuthorization(params *AuthImportBotAuthorizationParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AuthImportBotAuthorization")
	}

	resp, ok := data.(AuthAuthorization)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AuthCheckPasswordParams struct {
	Password InputCheckPasswordSRP `validate:"required"`
}

func (e *AuthCheckPasswordParams) CRC() uint32 {
	return uint32(0xd18b4d16)
}

func (e *AuthCheckPassword) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Password.Encode())
	return buf.Result()
}

func (с *Client) AuthCheckPassword(params *AuthCheckPasswordParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AuthCheckPassword")
	}

	resp, ok := data.(AuthAuthorization)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AuthRequestPasswordRecoveryParams struct{}

func (e *AuthRequestPasswordRecoveryParams) CRC() uint32 {
	return uint32(0xd897bc66)
}

func (e *AuthRequestPasswordRecovery) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) AuthRequestPasswordRecovery() {
	data, err := c.MakeRequest(&AuthRequestPasswordRecoveryParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning AuthRequestPasswordRecovery")
	}

	resp, ok := data.(*AuthPasswordRecovery)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AuthRecoverPasswordParams struct {
	Code string `validate:"required"`
}

func (e *AuthRecoverPasswordParams) CRC() uint32 {
	return uint32(0x4ea56e92)
}

func (e *AuthRecoverPassword) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Code)
	return buf.Result()
}

func (с *Client) AuthRecoverPassword(params *AuthRecoverPasswordParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AuthRecoverPassword")
	}

	resp, ok := data.(AuthAuthorization)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AuthResendCodeParams struct {
	PhoneNumber   string `validate:"required"`
	PhoneCodeHash string `validate:"required"`
}

func (e *AuthResendCodeParams) CRC() uint32 {
	return uint32(0x3ef1a9bf)
}

func (e *AuthResendCode) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.PhoneNumber)
	buf.PutString(e.PhoneCodeHash)
	return buf.Result()
}

func (с *Client) AuthResendCode(params *AuthResendCodeParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AuthResendCode")
	}

	resp, ok := data.(*AuthSentCode)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AuthCancelCodeParams struct {
	PhoneNumber   string `validate:"required"`
	PhoneCodeHash string `validate:"required"`
}

func (e *AuthCancelCodeParams) CRC() uint32 {
	return uint32(0x1f040578)
}

func (e *AuthCancelCode) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.PhoneNumber)
	buf.PutString(e.PhoneCodeHash)
	return buf.Result()
}

func (с *Client) AuthCancelCode(params *AuthCancelCodeParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AuthCancelCode")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AuthDropTempAuthKeysParams struct {
	ExceptAuthKeys []int64 `validate:"required"`
}

func (e *AuthDropTempAuthKeysParams) CRC() uint32 {
	return uint32(0x8e48a188)
}

func (e *AuthDropTempAuthKeys) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.ExceptAuthKeys)
	return buf.Result()
}

func (с *Client) AuthDropTempAuthKeys(params *AuthDropTempAuthKeysParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AuthDropTempAuthKeys")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AuthExportLoginTokenParams struct {
	ApiId     int32   `validate:"required"`
	ApiHash   string  `validate:"required"`
	ExceptIds []int32 `validate:"required"`
}

func (e *AuthExportLoginTokenParams) CRC() uint32 {
	return uint32(0xb1b41517)
}

func (e *AuthExportLoginToken) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ApiId)
	buf.PutString(e.ApiHash)
	buf.PutVector(e.ExceptIds)
	return buf.Result()
}

func (с *Client) AuthExportLoginToken(params *AuthExportLoginTokenParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AuthExportLoginToken")
	}

	resp, ok := data.(AuthLoginToken)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AuthImportLoginTokenParams struct {
	Token []byte `validate:"required"`
}

func (e *AuthImportLoginTokenParams) CRC() uint32 {
	return uint32(0x95ac5ce4)
}

func (e *AuthImportLoginToken) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Token)
	return buf.Result()
}

func (с *Client) AuthImportLoginToken(params *AuthImportLoginTokenParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AuthImportLoginToken")
	}

	resp, ok := data.(AuthLoginToken)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AuthAcceptLoginTokenParams struct {
	Token []byte `validate:"required"`
}

func (e *AuthAcceptLoginTokenParams) CRC() uint32 {
	return uint32(0xe894ad4d)
}

func (e *AuthAcceptLoginToken) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Token)
	return buf.Result()
}

func (с *Client) AuthAcceptLoginToken(params *AuthAcceptLoginTokenParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AuthAcceptLoginToken")
	}

	resp, ok := data.(*Authorization)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountRegisterDeviceParams struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	NoMuted         bool     `flag:"0,encoded_in_bitflags"`
	TokenType       int32    `validate:"required"`
	Token           string   `validate:"required"`
	AppSandbox      bool     `validate:"required"`
	Secret          []byte   `validate:"required"`
	OtherUids       []int32  `validate:"required"`
}

func (e *AccountRegisterDeviceParams) CRC() uint32 {
	return uint32(0x68976c6f)
}

func (e *AccountRegisterDevice) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.NoMuted) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutInt(e.TokenType)
	buf.PutString(e.Token)
	buf.PutBool(e.AppSandbox)
	buf.PutMessage(e.Secret)
	buf.PutVector(e.OtherUids)
	return buf.Result()
}

func (с *Client) AccountRegisterDevice(params *AccountRegisterDeviceParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountRegisterDevice")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountUnregisterDeviceParams struct {
	TokenType int32   `validate:"required"`
	Token     string  `validate:"required"`
	OtherUids []int32 `validate:"required"`
}

func (e *AccountUnregisterDeviceParams) CRC() uint32 {
	return uint32(0x3076c4bf)
}

func (e *AccountUnregisterDevice) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.TokenType)
	buf.PutString(e.Token)
	buf.PutVector(e.OtherUids)
	return buf.Result()
}

func (с *Client) AccountUnregisterDevice(params *AccountUnregisterDeviceParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountUnregisterDevice")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountUpdateNotifySettingsParams struct {
	Peer     InputNotifyPeer          `validate:"required"`
	Settings *InputPeerNotifySettings `validate:"required"`
}

func (e *AccountUpdateNotifySettingsParams) CRC() uint32 {
	return uint32(0x84be5b93)
}

func (e *AccountUpdateNotifySettings) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutRawBytes(e.Settings.Encode())
	return buf.Result()
}

func (с *Client) AccountUpdateNotifySettings(params *AccountUpdateNotifySettingsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountUpdateNotifySettings")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountGetNotifySettingsParams struct {
	Peer InputNotifyPeer `validate:"required"`
}

func (e *AccountGetNotifySettingsParams) CRC() uint32 {
	return uint32(0x12b3ad31)
}

func (e *AccountGetNotifySettings) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

func (с *Client) AccountGetNotifySettings(params *AccountGetNotifySettingsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountGetNotifySettings")
	}

	resp, ok := data.(*PeerNotifySettings)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountResetNotifySettingsParams struct{}

func (e *AccountResetNotifySettingsParams) CRC() uint32 {
	return uint32(0xdb7e1747)
}

func (e *AccountResetNotifySettings) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) AccountResetNotifySettings() {
	data, err := c.MakeRequest(&AccountResetNotifySettingsParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountResetNotifySettings")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountUpdateProfileParams struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	FirstName       string   `flag:"0"`
	LastName        string   `flag:"1"`
	About           string   `flag:"2"`
}

func (e *AccountUpdateProfileParams) CRC() uint32 {
	return uint32(0x78515775)
}

func (e *AccountUpdateProfile) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.FirstName) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.LastName) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.About) {
		flag |= 1 << 2
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.FirstName) {
		buf.PutString(e.FirstName)
	}
	if !zero.IsZeroVal(e.LastName) {
		buf.PutString(e.LastName)
	}
	if !zero.IsZeroVal(e.About) {
		buf.PutString(e.About)
	}
	return buf.Result()
}

func (с *Client) AccountUpdateProfile(params *AccountUpdateProfileParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountUpdateProfile")
	}

	resp, ok := data.(User)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountUpdateStatusParams struct {
	Offline bool `validate:"required"`
}

func (e *AccountUpdateStatusParams) CRC() uint32 {
	return uint32(0x6628562c)
}

func (e *AccountUpdateStatus) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutBool(e.Offline)
	return buf.Result()
}

func (с *Client) AccountUpdateStatus(params *AccountUpdateStatusParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountUpdateStatus")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountGetWallPapersParams struct {
	Hash int32 `validate:"required"`
}

func (e *AccountGetWallPapersParams) CRC() uint32 {
	return uint32(0xaabb1763)
}

func (e *AccountGetWallPapers) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Hash)
	return buf.Result()
}

func (с *Client) AccountGetWallPapers(params *AccountGetWallPapersParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountGetWallPapers")
	}

	resp, ok := data.(AccountWallPapers)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountReportPeerParams struct {
	Peer   InputPeer    `validate:"required"`
	Reason ReportReason `validate:"required"`
}

func (e *AccountReportPeerParams) CRC() uint32 {
	return uint32(0xae189d5f)
}

func (e *AccountReportPeer) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutRawBytes(e.Reason.Encode())
	return buf.Result()
}

func (с *Client) AccountReportPeer(params *AccountReportPeerParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountReportPeer")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountCheckUsernameParams struct {
	Username string `validate:"required"`
}

func (e *AccountCheckUsernameParams) CRC() uint32 {
	return uint32(0x2714d86c)
}

func (e *AccountCheckUsername) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Username)
	return buf.Result()
}

func (с *Client) AccountCheckUsername(params *AccountCheckUsernameParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountCheckUsername")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountUpdateUsernameParams struct {
	Username string `validate:"required"`
}

func (e *AccountUpdateUsernameParams) CRC() uint32 {
	return uint32(0x3e0bdd7c)
}

func (e *AccountUpdateUsername) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Username)
	return buf.Result()
}

func (с *Client) AccountUpdateUsername(params *AccountUpdateUsernameParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountUpdateUsername")
	}

	resp, ok := data.(User)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountGetPrivacyParams struct {
	Key InputPrivacyKey `validate:"required"`
}

func (e *AccountGetPrivacyParams) CRC() uint32 {
	return uint32(0xdadbc950)
}

func (e *AccountGetPrivacy) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Key.Encode())
	return buf.Result()
}

func (с *Client) AccountGetPrivacy(params *AccountGetPrivacyParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountGetPrivacy")
	}

	resp, ok := data.(*AccountPrivacyRules)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountSetPrivacyParams struct {
	Key   InputPrivacyKey    `validate:"required"`
	Rules []InputPrivacyRule `validate:"required"`
}

func (e *AccountSetPrivacyParams) CRC() uint32 {
	return uint32(0xc9f81ce8)
}

func (e *AccountSetPrivacy) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Key.Encode())
	buf.PutVector(e.Rules)
	return buf.Result()
}

func (с *Client) AccountSetPrivacy(params *AccountSetPrivacyParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountSetPrivacy")
	}

	resp, ok := data.(*AccountPrivacyRules)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountDeleteAccountParams struct {
	Reason string `validate:"required"`
}

func (e *AccountDeleteAccountParams) CRC() uint32 {
	return uint32(0x418d4e0b)
}

func (e *AccountDeleteAccount) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Reason)
	return buf.Result()
}

func (с *Client) AccountDeleteAccount(params *AccountDeleteAccountParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountDeleteAccount")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountGetAccountTTLParams struct{}

func (e *AccountGetAccountTTLParams) CRC() uint32 {
	return uint32(0x8fc711d)
}

func (e *AccountGetAccountTTL) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) AccountGetAccountTTL() {
	data, err := c.MakeRequest(&AccountGetAccountTTLParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountGetAccountTTL")
	}

	resp, ok := data.(*AccountDaysTTL)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountSetAccountTTLParams struct {
	Ttl *AccountDaysTTL `validate:"required"`
}

func (e *AccountSetAccountTTLParams) CRC() uint32 {
	return uint32(0x2442485e)
}

func (e *AccountSetAccountTTL) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Ttl.Encode())
	return buf.Result()
}

func (с *Client) AccountSetAccountTTL(params *AccountSetAccountTTLParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountSetAccountTTL")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountSendChangePhoneCodeParams struct {
	PhoneNumber string        `validate:"required"`
	Settings    *CodeSettings `validate:"required"`
}

func (e *AccountSendChangePhoneCodeParams) CRC() uint32 {
	return uint32(0x82574ae5)
}

func (e *AccountSendChangePhoneCode) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.PhoneNumber)
	buf.PutRawBytes(e.Settings.Encode())
	return buf.Result()
}

func (с *Client) AccountSendChangePhoneCode(params *AccountSendChangePhoneCodeParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountSendChangePhoneCode")
	}

	resp, ok := data.(*AuthSentCode)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountChangePhoneParams struct {
	PhoneNumber   string `validate:"required"`
	PhoneCodeHash string `validate:"required"`
	PhoneCode     string `validate:"required"`
}

func (e *AccountChangePhoneParams) CRC() uint32 {
	return uint32(0x70c32edb)
}

func (e *AccountChangePhone) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.PhoneNumber)
	buf.PutString(e.PhoneCodeHash)
	buf.PutString(e.PhoneCode)
	return buf.Result()
}

func (с *Client) AccountChangePhone(params *AccountChangePhoneParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountChangePhone")
	}

	resp, ok := data.(User)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountUpdateDeviceLockedParams struct {
	Period int32 `validate:"required"`
}

func (e *AccountUpdateDeviceLockedParams) CRC() uint32 {
	return uint32(0x38df3532)
}

func (e *AccountUpdateDeviceLocked) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Period)
	return buf.Result()
}

func (с *Client) AccountUpdateDeviceLocked(params *AccountUpdateDeviceLockedParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountUpdateDeviceLocked")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountGetAuthorizationsParams struct{}

func (e *AccountGetAuthorizationsParams) CRC() uint32 {
	return uint32(0xe320c158)
}

func (e *AccountGetAuthorizations) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) AccountGetAuthorizations() {
	data, err := c.MakeRequest(&AccountGetAuthorizationsParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountGetAuthorizations")
	}

	resp, ok := data.(*AccountAuthorizations)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountResetAuthorizationParams struct {
	Hash int64 `validate:"required"`
}

func (e *AccountResetAuthorizationParams) CRC() uint32 {
	return uint32(0xdf77f3bc)
}

func (e *AccountResetAuthorization) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.Hash)
	return buf.Result()
}

func (с *Client) AccountResetAuthorization(params *AccountResetAuthorizationParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountResetAuthorization")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountGetPasswordParams struct{}

func (e *AccountGetPasswordParams) CRC() uint32 {
	return uint32(0x548a30f5)
}

func (e *AccountGetPassword) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) AccountGetPassword() {
	data, err := c.MakeRequest(&AccountGetPasswordParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountGetPassword")
	}

	resp, ok := data.(*AccountPassword)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountGetPasswordSettingsParams struct {
	Password InputCheckPasswordSRP `validate:"required"`
}

func (e *AccountGetPasswordSettingsParams) CRC() uint32 {
	return uint32(0x9cd4eaf9)
}

func (e *AccountGetPasswordSettings) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Password.Encode())
	return buf.Result()
}

func (с *Client) AccountGetPasswordSettings(params *AccountGetPasswordSettingsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountGetPasswordSettings")
	}

	resp, ok := data.(*AccountPasswordSettings)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountUpdatePasswordSettingsParams struct {
	Password    InputCheckPasswordSRP         `validate:"required"`
	NewSettings *AccountPasswordInputSettings `validate:"required"`
}

func (e *AccountUpdatePasswordSettingsParams) CRC() uint32 {
	return uint32(0xa59b102f)
}

func (e *AccountUpdatePasswordSettings) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Password.Encode())
	buf.PutRawBytes(e.NewSettings.Encode())
	return buf.Result()
}

func (с *Client) AccountUpdatePasswordSettings(params *AccountUpdatePasswordSettingsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountUpdatePasswordSettings")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountSendConfirmPhoneCodeParams struct {
	Hash     string        `validate:"required"`
	Settings *CodeSettings `validate:"required"`
}

func (e *AccountSendConfirmPhoneCodeParams) CRC() uint32 {
	return uint32(0x1b3faa88)
}

func (e *AccountSendConfirmPhoneCode) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Hash)
	buf.PutRawBytes(e.Settings.Encode())
	return buf.Result()
}

func (с *Client) AccountSendConfirmPhoneCode(params *AccountSendConfirmPhoneCodeParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountSendConfirmPhoneCode")
	}

	resp, ok := data.(*AuthSentCode)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountConfirmPhoneParams struct {
	PhoneCodeHash string `validate:"required"`
	PhoneCode     string `validate:"required"`
}

func (e *AccountConfirmPhoneParams) CRC() uint32 {
	return uint32(0x5f2178c3)
}

func (e *AccountConfirmPhone) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.PhoneCodeHash)
	buf.PutString(e.PhoneCode)
	return buf.Result()
}

func (с *Client) AccountConfirmPhone(params *AccountConfirmPhoneParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountConfirmPhone")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountGetTmpPasswordParams struct {
	Password InputCheckPasswordSRP `validate:"required"`
	Period   int32                 `validate:"required"`
}

func (e *AccountGetTmpPasswordParams) CRC() uint32 {
	return uint32(0x449e0b51)
}

func (e *AccountGetTmpPassword) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Password.Encode())
	buf.PutInt(e.Period)
	return buf.Result()
}

func (с *Client) AccountGetTmpPassword(params *AccountGetTmpPasswordParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountGetTmpPassword")
	}

	resp, ok := data.(*AccountTmpPassword)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountGetWebAuthorizationsParams struct{}

func (e *AccountGetWebAuthorizationsParams) CRC() uint32 {
	return uint32(0x182e6d6f)
}

func (e *AccountGetWebAuthorizations) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) AccountGetWebAuthorizations() {
	data, err := c.MakeRequest(&AccountGetWebAuthorizationsParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountGetWebAuthorizations")
	}

	resp, ok := data.(*AccountWebAuthorizations)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountResetWebAuthorizationParams struct {
	Hash int64 `validate:"required"`
}

func (e *AccountResetWebAuthorizationParams) CRC() uint32 {
	return uint32(0x2d01b9ef)
}

func (e *AccountResetWebAuthorization) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.Hash)
	return buf.Result()
}

func (с *Client) AccountResetWebAuthorization(params *AccountResetWebAuthorizationParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountResetWebAuthorization")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountResetWebAuthorizationsParams struct{}

func (e *AccountResetWebAuthorizationsParams) CRC() uint32 {
	return uint32(0x682d2594)
}

func (e *AccountResetWebAuthorizations) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) AccountResetWebAuthorizations() {
	data, err := c.MakeRequest(&AccountResetWebAuthorizationsParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountResetWebAuthorizations")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountGetAllSecureValuesParams struct{}

func (e *AccountGetAllSecureValuesParams) CRC() uint32 {
	return uint32(0xb288bc7d)
}

func (e *AccountGetAllSecureValues) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) AccountGetAllSecureValues() {
	data, err := c.MakeRequest(&AccountGetAllSecureValuesParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountGetAllSecureValues")
	}

	resp, ok := data.(*SecureValue)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountGetSecureValueParams struct {
	Types []SecureValueType `validate:"required"`
}

func (e *AccountGetSecureValueParams) CRC() uint32 {
	return uint32(0x73665bc2)
}

func (e *AccountGetSecureValue) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Types)
	return buf.Result()
}

func (с *Client) AccountGetSecureValue(params *AccountGetSecureValueParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountGetSecureValue")
	}

	resp, ok := data.(*SecureValue)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountSaveSecureValueParams struct {
	Value          *InputSecureValue `validate:"required"`
	SecureSecretId int64             `validate:"required"`
}

func (e *AccountSaveSecureValueParams) CRC() uint32 {
	return uint32(0x899fe31d)
}

func (e *AccountSaveSecureValue) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Value.Encode())
	buf.PutLong(e.SecureSecretId)
	return buf.Result()
}

func (с *Client) AccountSaveSecureValue(params *AccountSaveSecureValueParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountSaveSecureValue")
	}

	resp, ok := data.(*SecureValue)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountDeleteSecureValueParams struct {
	Types []SecureValueType `validate:"required"`
}

func (e *AccountDeleteSecureValueParams) CRC() uint32 {
	return uint32(0xb880bc4b)
}

func (e *AccountDeleteSecureValue) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Types)
	return buf.Result()
}

func (с *Client) AccountDeleteSecureValue(params *AccountDeleteSecureValueParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountDeleteSecureValue")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountGetAuthorizationFormParams struct {
	BotId     int32  `validate:"required"`
	Scope     string `validate:"required"`
	PublicKey string `validate:"required"`
}

func (e *AccountGetAuthorizationFormParams) CRC() uint32 {
	return uint32(0xb86ba8e1)
}

func (e *AccountGetAuthorizationForm) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.BotId)
	buf.PutString(e.Scope)
	buf.PutString(e.PublicKey)
	return buf.Result()
}

func (с *Client) AccountGetAuthorizationForm(params *AccountGetAuthorizationFormParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountGetAuthorizationForm")
	}

	resp, ok := data.(*AccountAuthorizationForm)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountAcceptAuthorizationParams struct {
	BotId       int32                       `validate:"required"`
	Scope       string                      `validate:"required"`
	PublicKey   string                      `validate:"required"`
	ValueHashes []*SecureValueHash          `validate:"required"`
	Credentials *SecureCredentialsEncrypted `validate:"required"`
}

func (e *AccountAcceptAuthorizationParams) CRC() uint32 {
	return uint32(0xe7027c94)
}

func (e *AccountAcceptAuthorization) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.BotId)
	buf.PutString(e.Scope)
	buf.PutString(e.PublicKey)
	buf.PutVector(e.ValueHashes)
	buf.PutRawBytes(e.Credentials.Encode())
	return buf.Result()
}

func (с *Client) AccountAcceptAuthorization(params *AccountAcceptAuthorizationParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountAcceptAuthorization")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountSendVerifyPhoneCodeParams struct {
	PhoneNumber string        `validate:"required"`
	Settings    *CodeSettings `validate:"required"`
}

func (e *AccountSendVerifyPhoneCodeParams) CRC() uint32 {
	return uint32(0xa5a356f9)
}

func (e *AccountSendVerifyPhoneCode) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.PhoneNumber)
	buf.PutRawBytes(e.Settings.Encode())
	return buf.Result()
}

func (с *Client) AccountSendVerifyPhoneCode(params *AccountSendVerifyPhoneCodeParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountSendVerifyPhoneCode")
	}

	resp, ok := data.(*AuthSentCode)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountVerifyPhoneParams struct {
	PhoneNumber   string `validate:"required"`
	PhoneCodeHash string `validate:"required"`
	PhoneCode     string `validate:"required"`
}

func (e *AccountVerifyPhoneParams) CRC() uint32 {
	return uint32(0x4dd3a7f6)
}

func (e *AccountVerifyPhone) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.PhoneNumber)
	buf.PutString(e.PhoneCodeHash)
	buf.PutString(e.PhoneCode)
	return buf.Result()
}

func (с *Client) AccountVerifyPhone(params *AccountVerifyPhoneParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountVerifyPhone")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountSendVerifyEmailCodeParams struct {
	Email string `validate:"required"`
}

func (e *AccountSendVerifyEmailCodeParams) CRC() uint32 {
	return uint32(0x7011509f)
}

func (e *AccountSendVerifyEmailCode) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Email)
	return buf.Result()
}

func (с *Client) AccountSendVerifyEmailCode(params *AccountSendVerifyEmailCodeParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountSendVerifyEmailCode")
	}

	resp, ok := data.(*AccountSentEmailCode)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountVerifyEmailParams struct {
	Email string `validate:"required"`
	Code  string `validate:"required"`
}

func (e *AccountVerifyEmailParams) CRC() uint32 {
	return uint32(0xecba39db)
}

func (e *AccountVerifyEmail) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Email)
	buf.PutString(e.Code)
	return buf.Result()
}

func (с *Client) AccountVerifyEmail(params *AccountVerifyEmailParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountVerifyEmail")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountInitTakeoutSessionParams struct {
	__flagsPosition   struct{} // flags param position `validate:"required"`
	Contacts          bool     `flag:"0,encoded_in_bitflags"`
	MessageUsers      bool     `flag:"1,encoded_in_bitflags"`
	MessageChats      bool     `flag:"2,encoded_in_bitflags"`
	MessageMegagroups bool     `flag:"3,encoded_in_bitflags"`
	MessageChannels   bool     `flag:"4,encoded_in_bitflags"`
	Files             bool     `flag:"5,encoded_in_bitflags"`
	FileMaxSize       int32    `flag:"5"`
}

func (e *AccountInitTakeoutSessionParams) CRC() uint32 {
	return uint32(0xf05b4804)
}

func (e *AccountInitTakeoutSession) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Contacts) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.MessageUsers) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.MessageChats) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.MessageMegagroups) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.MessageChannels) {
		flag |= 1 << 4
	}
	if !zero.IsZeroVal(e.Files) || !zero.IsZeroVal(e.FileMaxSize) {
		flag |= 1 << 5
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.FileMaxSize) {
		buf.PutInt(e.FileMaxSize)
	}
	return buf.Result()
}

func (с *Client) AccountInitTakeoutSession(params *AccountInitTakeoutSessionParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountInitTakeoutSession")
	}

	resp, ok := data.(*AccountTakeout)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountFinishTakeoutSessionParams struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	Success         bool     `flag:"0,encoded_in_bitflags"`
}

func (e *AccountFinishTakeoutSessionParams) CRC() uint32 {
	return uint32(0x1d2652ee)
}

func (e *AccountFinishTakeoutSession) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Success) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	return buf.Result()
}

func (с *Client) AccountFinishTakeoutSession(params *AccountFinishTakeoutSessionParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountFinishTakeoutSession")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountConfirmPasswordEmailParams struct {
	Code string `validate:"required"`
}

func (e *AccountConfirmPasswordEmailParams) CRC() uint32 {
	return uint32(0x8fdf1920)
}

func (e *AccountConfirmPasswordEmail) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Code)
	return buf.Result()
}

func (с *Client) AccountConfirmPasswordEmail(params *AccountConfirmPasswordEmailParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountConfirmPasswordEmail")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountResendPasswordEmailParams struct{}

func (e *AccountResendPasswordEmailParams) CRC() uint32 {
	return uint32(0x7a7f2a15)
}

func (e *AccountResendPasswordEmail) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) AccountResendPasswordEmail() {
	data, err := c.MakeRequest(&AccountResendPasswordEmailParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountResendPasswordEmail")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountCancelPasswordEmailParams struct{}

func (e *AccountCancelPasswordEmailParams) CRC() uint32 {
	return uint32(0xc1cbd5b6)
}

func (e *AccountCancelPasswordEmail) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) AccountCancelPasswordEmail() {
	data, err := c.MakeRequest(&AccountCancelPasswordEmailParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountCancelPasswordEmail")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountGetContactSignUpNotificationParams struct{}

func (e *AccountGetContactSignUpNotificationParams) CRC() uint32 {
	return uint32(0x9f07c728)
}

func (e *AccountGetContactSignUpNotification) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) AccountGetContactSignUpNotification() {
	data, err := c.MakeRequest(&AccountGetContactSignUpNotificationParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountGetContactSignUpNotification")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountSetContactSignUpNotificationParams struct {
	Silent bool `validate:"required"`
}

func (e *AccountSetContactSignUpNotificationParams) CRC() uint32 {
	return uint32(0xcff43f61)
}

func (e *AccountSetContactSignUpNotification) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutBool(e.Silent)
	return buf.Result()
}

func (с *Client) AccountSetContactSignUpNotification(params *AccountSetContactSignUpNotificationParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountSetContactSignUpNotification")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountGetNotifyExceptionsParams struct {
	__flagsPosition struct{}        // flags param position `validate:"required"`
	CompareSound    bool            `flag:"1,encoded_in_bitflags"`
	Peer            InputNotifyPeer `flag:"0"`
}

func (e *AccountGetNotifyExceptionsParams) CRC() uint32 {
	return uint32(0x53577479)
}

func (e *AccountGetNotifyExceptions) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Peer) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.CompareSound) {
		flag |= 1 << 1
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.Peer) {
		buf.PutRawBytes(e.Peer.Encode())
	}
	return buf.Result()
}

func (с *Client) AccountGetNotifyExceptions(params *AccountGetNotifyExceptionsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountGetNotifyExceptions")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountGetWallPaperParams struct {
	Wallpaper InputWallPaper `validate:"required"`
}

func (e *AccountGetWallPaperParams) CRC() uint32 {
	return uint32(0xfc8ddbea)
}

func (e *AccountGetWallPaper) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Wallpaper.Encode())
	return buf.Result()
}

func (с *Client) AccountGetWallPaper(params *AccountGetWallPaperParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountGetWallPaper")
	}

	resp, ok := data.(WallPaper)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountUploadWallPaperParams struct {
	File     InputFile          `validate:"required"`
	MimeType string             `validate:"required"`
	Settings *WallPaperSettings `validate:"required"`
}

func (e *AccountUploadWallPaperParams) CRC() uint32 {
	return uint32(0xdd853661)
}

func (e *AccountUploadWallPaper) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.File.Encode())
	buf.PutString(e.MimeType)
	buf.PutRawBytes(e.Settings.Encode())
	return buf.Result()
}

func (с *Client) AccountUploadWallPaper(params *AccountUploadWallPaperParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountUploadWallPaper")
	}

	resp, ok := data.(WallPaper)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountSaveWallPaperParams struct {
	Wallpaper InputWallPaper     `validate:"required"`
	Unsave    bool               `validate:"required"`
	Settings  *WallPaperSettings `validate:"required"`
}

func (e *AccountSaveWallPaperParams) CRC() uint32 {
	return uint32(0x6c5a5b37)
}

func (e *AccountSaveWallPaper) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Wallpaper.Encode())
	buf.PutBool(e.Unsave)
	buf.PutRawBytes(e.Settings.Encode())
	return buf.Result()
}

func (с *Client) AccountSaveWallPaper(params *AccountSaveWallPaperParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountSaveWallPaper")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountInstallWallPaperParams struct {
	Wallpaper InputWallPaper     `validate:"required"`
	Settings  *WallPaperSettings `validate:"required"`
}

func (e *AccountInstallWallPaperParams) CRC() uint32 {
	return uint32(0xfeed5769)
}

func (e *AccountInstallWallPaper) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Wallpaper.Encode())
	buf.PutRawBytes(e.Settings.Encode())
	return buf.Result()
}

func (с *Client) AccountInstallWallPaper(params *AccountInstallWallPaperParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountInstallWallPaper")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountResetWallPapersParams struct{}

func (e *AccountResetWallPapersParams) CRC() uint32 {
	return uint32(0xbb3b9804)
}

func (e *AccountResetWallPapers) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) AccountResetWallPapers() {
	data, err := c.MakeRequest(&AccountResetWallPapersParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountResetWallPapers")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountGetAutoDownloadSettingsParams struct{}

func (e *AccountGetAutoDownloadSettingsParams) CRC() uint32 {
	return uint32(0x56da0b3f)
}

func (e *AccountGetAutoDownloadSettings) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) AccountGetAutoDownloadSettings() {
	data, err := c.MakeRequest(&AccountGetAutoDownloadSettingsParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountGetAutoDownloadSettings")
	}

	resp, ok := data.(*AccountAutoDownloadSettings)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountSaveAutoDownloadSettingsParams struct {
	__flagsPosition struct{}              // flags param position `validate:"required"`
	Low             bool                  `flag:"0,encoded_in_bitflags"`
	High            bool                  `flag:"1,encoded_in_bitflags"`
	Settings        *AutoDownloadSettings `validate:"required"`
}

func (e *AccountSaveAutoDownloadSettingsParams) CRC() uint32 {
	return uint32(0x76f36233)
}

func (e *AccountSaveAutoDownloadSettings) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Low) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.High) {
		flag |= 1 << 1
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Settings.Encode())
	return buf.Result()
}

func (с *Client) AccountSaveAutoDownloadSettings(params *AccountSaveAutoDownloadSettingsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountSaveAutoDownloadSettings")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountUploadThemeParams struct {
	__flagsPosition struct{}  // flags param position `validate:"required"`
	File            InputFile `validate:"required"`
	Thumb           InputFile `flag:"0"`
	FileName        string    `validate:"required"`
	MimeType        string    `validate:"required"`
}

func (e *AccountUploadThemeParams) CRC() uint32 {
	return uint32(0x1c3db333)
}

func (e *AccountUploadTheme) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Thumb) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.File.Encode())
	if !zero.IsZeroVal(e.Thumb) {
		buf.PutRawBytes(e.Thumb.Encode())
	}
	buf.PutString(e.FileName)
	buf.PutString(e.MimeType)
	return buf.Result()
}

func (с *Client) AccountUploadTheme(params *AccountUploadThemeParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountUploadTheme")
	}

	resp, ok := data.(Document)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountCreateThemeParams struct {
	__flagsPosition struct{}            // flags param position `validate:"required"`
	Slug            string              `validate:"required"`
	Title           string              `validate:"required"`
	Document        InputDocument       `flag:"2"`
	Settings        *InputThemeSettings `flag:"3"`
}

func (e *AccountCreateThemeParams) CRC() uint32 {
	return uint32(0x8432c21f)
}

func (e *AccountCreateTheme) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Document) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Settings) {
		flag |= 1 << 3
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutString(e.Slug)
	buf.PutString(e.Title)
	if !zero.IsZeroVal(e.Document) {
		buf.PutRawBytes(e.Document.Encode())
	}
	if !zero.IsZeroVal(e.Settings) {
		buf.PutRawBytes(e.Settings.Encode())
	}
	return buf.Result()
}

func (с *Client) AccountCreateTheme(params *AccountCreateThemeParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountCreateTheme")
	}

	resp, ok := data.(*Theme)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountUpdateThemeParams struct {
	__flagsPosition struct{}            // flags param position `validate:"required"`
	Format          string              `validate:"required"`
	Theme           InputTheme          `validate:"required"`
	Slug            string              `flag:"0"`
	Title           string              `flag:"1"`
	Document        InputDocument       `flag:"2"`
	Settings        *InputThemeSettings `flag:"3"`
}

func (e *AccountUpdateThemeParams) CRC() uint32 {
	return uint32(0x5cb367d5)
}

func (e *AccountUpdateTheme) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Slug) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Title) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Document) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Settings) {
		flag |= 1 << 3
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutString(e.Format)
	buf.PutRawBytes(e.Theme.Encode())
	if !zero.IsZeroVal(e.Slug) {
		buf.PutString(e.Slug)
	}
	if !zero.IsZeroVal(e.Title) {
		buf.PutString(e.Title)
	}
	if !zero.IsZeroVal(e.Document) {
		buf.PutRawBytes(e.Document.Encode())
	}
	if !zero.IsZeroVal(e.Settings) {
		buf.PutRawBytes(e.Settings.Encode())
	}
	return buf.Result()
}

func (с *Client) AccountUpdateTheme(params *AccountUpdateThemeParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountUpdateTheme")
	}

	resp, ok := data.(*Theme)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountSaveThemeParams struct {
	Theme  InputTheme `validate:"required"`
	Unsave bool       `validate:"required"`
}

func (e *AccountSaveThemeParams) CRC() uint32 {
	return uint32(0xf257106c)
}

func (e *AccountSaveTheme) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Theme.Encode())
	buf.PutBool(e.Unsave)
	return buf.Result()
}

func (с *Client) AccountSaveTheme(params *AccountSaveThemeParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountSaveTheme")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountInstallThemeParams struct {
	__flagsPosition struct{}   // flags param position `validate:"required"`
	Dark            bool       `flag:"0,encoded_in_bitflags"`
	Format          string     `flag:"1"`
	Theme           InputTheme `flag:"1"`
}

func (e *AccountInstallThemeParams) CRC() uint32 {
	return uint32(0x7ae43737)
}

func (e *AccountInstallTheme) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Dark) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Format) || !zero.IsZeroVal(e.Theme) {
		flag |= 1 << 1
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.Format) {
		buf.PutString(e.Format)
	}
	if !zero.IsZeroVal(e.Theme) {
		buf.PutRawBytes(e.Theme.Encode())
	}
	return buf.Result()
}

func (с *Client) AccountInstallTheme(params *AccountInstallThemeParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountInstallTheme")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountGetThemeParams struct {
	Format     string     `validate:"required"`
	Theme      InputTheme `validate:"required"`
	DocumentId int64      `validate:"required"`
}

func (e *AccountGetThemeParams) CRC() uint32 {
	return uint32(0x8d9d742b)
}

func (e *AccountGetTheme) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Format)
	buf.PutRawBytes(e.Theme.Encode())
	buf.PutLong(e.DocumentId)
	return buf.Result()
}

func (с *Client) AccountGetTheme(params *AccountGetThemeParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountGetTheme")
	}

	resp, ok := data.(*Theme)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountGetThemesParams struct {
	Format string `validate:"required"`
	Hash   int32  `validate:"required"`
}

func (e *AccountGetThemesParams) CRC() uint32 {
	return uint32(0x285946f8)
}

func (e *AccountGetThemes) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Format)
	buf.PutInt(e.Hash)
	return buf.Result()
}

func (с *Client) AccountGetThemes(params *AccountGetThemesParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountGetThemes")
	}

	resp, ok := data.(AccountThemes)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountSetContentSettingsParams struct {
	__flagsPosition  struct{} // flags param position `validate:"required"`
	SensitiveEnabled bool     `flag:"0,encoded_in_bitflags"`
}

func (e *AccountSetContentSettingsParams) CRC() uint32 {
	return uint32(0xb574b16b)
}

func (e *AccountSetContentSettings) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.SensitiveEnabled) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	return buf.Result()
}

func (с *Client) AccountSetContentSettings(params *AccountSetContentSettingsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountSetContentSettings")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountGetContentSettingsParams struct{}

func (e *AccountGetContentSettingsParams) CRC() uint32 {
	return uint32(0x8b9b4dae)
}

func (e *AccountGetContentSettings) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) AccountGetContentSettings() {
	data, err := c.MakeRequest(&AccountGetContentSettingsParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountGetContentSettings")
	}

	resp, ok := data.(*AccountContentSettings)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountGetMultiWallPapersParams struct {
	Wallpapers []InputWallPaper `validate:"required"`
}

func (e *AccountGetMultiWallPapersParams) CRC() uint32 {
	return uint32(0x65ad71dc)
}

func (e *AccountGetMultiWallPapers) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Wallpapers)
	return buf.Result()
}

func (с *Client) AccountGetMultiWallPapers(params *AccountGetMultiWallPapersParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountGetMultiWallPapers")
	}

	resp, ok := data.(WallPaper)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountGetGlobalPrivacySettingsParams struct{}

func (e *AccountGetGlobalPrivacySettingsParams) CRC() uint32 {
	return uint32(0xeb2b4cf6)
}

func (e *AccountGetGlobalPrivacySettings) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) AccountGetGlobalPrivacySettings() {
	data, err := c.MakeRequest(&AccountGetGlobalPrivacySettingsParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountGetGlobalPrivacySettings")
	}

	resp, ok := data.(*GlobalPrivacySettings)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type AccountSetGlobalPrivacySettingsParams struct {
	Settings *GlobalPrivacySettings `validate:"required"`
}

func (e *AccountSetGlobalPrivacySettingsParams) CRC() uint32 {
	return uint32(0x1edaaac2)
}

func (e *AccountSetGlobalPrivacySettings) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Settings.Encode())
	return buf.Result()
}

func (с *Client) AccountSetGlobalPrivacySettings(params *AccountSetGlobalPrivacySettingsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning AccountSetGlobalPrivacySettings")
	}

	resp, ok := data.(*GlobalPrivacySettings)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type UsersGetUsersParams struct {
	Id []InputUser `validate:"required"`
}

func (e *UsersGetUsersParams) CRC() uint32 {
	return uint32(0xd91a548)
}

func (e *UsersGetUsers) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Id)
	return buf.Result()
}

func (с *Client) UsersGetUsers(params *UsersGetUsersParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning UsersGetUsers")
	}

	resp, ok := data.(User)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type UsersGetFullUserParams struct {
	Id InputUser `validate:"required"`
}

func (e *UsersGetFullUserParams) CRC() uint32 {
	return uint32(0xca30a5b1)
}

func (e *UsersGetFullUser) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Id.Encode())
	return buf.Result()
}

func (с *Client) UsersGetFullUser(params *UsersGetFullUserParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning UsersGetFullUser")
	}

	resp, ok := data.(*UserFull)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type UsersSetSecureValueErrorsParams struct {
	Id     InputUser          `validate:"required"`
	Errors []SecureValueError `validate:"required"`
}

func (e *UsersSetSecureValueErrorsParams) CRC() uint32 {
	return uint32(0x90c894b5)
}

func (e *UsersSetSecureValueErrors) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Id.Encode())
	buf.PutVector(e.Errors)
	return buf.Result()
}

func (с *Client) UsersSetSecureValueErrors(params *UsersSetSecureValueErrorsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning UsersSetSecureValueErrors")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ContactsGetContactIDsParams struct {
	Hash int32 `validate:"required"`
}

func (e *ContactsGetContactIDsParams) CRC() uint32 {
	return uint32(0x2caa4a42)
}

func (e *ContactsGetContactIDs) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Hash)
	return buf.Result()
}

func (с *Client) ContactsGetContactIDs(params *ContactsGetContactIDsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ContactsGetContactIDs")
	}

	resp, ok := data.(Int)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ContactsGetStatusesParams struct{}

func (e *ContactsGetStatusesParams) CRC() uint32 {
	return uint32(0xc4a353ee)
}

func (e *ContactsGetStatuses) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) ContactsGetStatuses() {
	data, err := c.MakeRequest(&ContactsGetStatusesParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning ContactsGetStatuses")
	}

	resp, ok := data.(*ContactStatus)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ContactsGetContactsParams struct {
	Hash int32 `validate:"required"`
}

func (e *ContactsGetContactsParams) CRC() uint32 {
	return uint32(0xc023849f)
}

func (e *ContactsGetContacts) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Hash)
	return buf.Result()
}

func (с *Client) ContactsGetContacts(params *ContactsGetContactsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ContactsGetContacts")
	}

	resp, ok := data.(ContactsContacts)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ContactsImportContactsParams struct {
	Contacts []*InputContact `validate:"required"`
}

func (e *ContactsImportContactsParams) CRC() uint32 {
	return uint32(0x2c800be5)
}

func (e *ContactsImportContacts) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Contacts)
	return buf.Result()
}

func (с *Client) ContactsImportContacts(params *ContactsImportContactsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ContactsImportContacts")
	}

	resp, ok := data.(*ContactsImportedContacts)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ContactsDeleteContactsParams struct {
	Id []InputUser `validate:"required"`
}

func (e *ContactsDeleteContactsParams) CRC() uint32 {
	return uint32(0x96a0e00)
}

func (e *ContactsDeleteContacts) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Id)
	return buf.Result()
}

func (с *Client) ContactsDeleteContacts(params *ContactsDeleteContactsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ContactsDeleteContacts")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ContactsDeleteByPhonesParams struct {
	Phones []string `validate:"required"`
}

func (e *ContactsDeleteByPhonesParams) CRC() uint32 {
	return uint32(0x1013fd9e)
}

func (e *ContactsDeleteByPhones) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Phones)
	return buf.Result()
}

func (с *Client) ContactsDeleteByPhones(params *ContactsDeleteByPhonesParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ContactsDeleteByPhones")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ContactsBlockParams struct {
	Id InputUser `validate:"required"`
}

func (e *ContactsBlockParams) CRC() uint32 {
	return uint32(0x332b49fc)
}

func (e *ContactsBlock) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Id.Encode())
	return buf.Result()
}

func (с *Client) ContactsBlock(params *ContactsBlockParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ContactsBlock")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ContactsUnblockParams struct {
	Id InputUser `validate:"required"`
}

func (e *ContactsUnblockParams) CRC() uint32 {
	return uint32(0xe54100bd)
}

func (e *ContactsUnblock) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Id.Encode())
	return buf.Result()
}

func (с *Client) ContactsUnblock(params *ContactsUnblockParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ContactsUnblock")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ContactsGetBlockedParams struct {
	Offset int32 `validate:"required"`
	Limit  int32 `validate:"required"`
}

func (e *ContactsGetBlockedParams) CRC() uint32 {
	return uint32(0xf57c350f)
}

func (e *ContactsGetBlocked) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Offset)
	buf.PutInt(e.Limit)
	return buf.Result()
}

func (с *Client) ContactsGetBlocked(params *ContactsGetBlockedParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ContactsGetBlocked")
	}

	resp, ok := data.(ContactsBlocked)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ContactsSearchParams struct {
	Q     string `validate:"required"`
	Limit int32  `validate:"required"`
}

func (e *ContactsSearchParams) CRC() uint32 {
	return uint32(0x11f812d8)
}

func (e *ContactsSearch) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Q)
	buf.PutInt(e.Limit)
	return buf.Result()
}

func (с *Client) ContactsSearch(params *ContactsSearchParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ContactsSearch")
	}

	resp, ok := data.(*ContactsFound)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ContactsResolveUsernameParams struct {
	Username string `validate:"required"`
}

func (e *ContactsResolveUsernameParams) CRC() uint32 {
	return uint32(0xf93ccba3)
}

func (e *ContactsResolveUsername) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Username)
	return buf.Result()
}

func (с *Client) ContactsResolveUsername(params *ContactsResolveUsernameParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ContactsResolveUsername")
	}

	resp, ok := data.(*ContactsResolvedPeer)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ContactsGetTopPeersParams struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	Correspondents  bool     `flag:"0,encoded_in_bitflags"`
	BotsPm          bool     `flag:"1,encoded_in_bitflags"`
	BotsInline      bool     `flag:"2,encoded_in_bitflags"`
	PhoneCalls      bool     `flag:"3,encoded_in_bitflags"`
	ForwardUsers    bool     `flag:"4,encoded_in_bitflags"`
	ForwardChats    bool     `flag:"5,encoded_in_bitflags"`
	Groups          bool     `flag:"10,encoded_in_bitflags"`
	Channels        bool     `flag:"15,encoded_in_bitflags"`
	Offset          int32    `validate:"required"`
	Limit           int32    `validate:"required"`
	Hash            int32    `validate:"required"`
}

func (e *ContactsGetTopPeersParams) CRC() uint32 {
	return uint32(0xd4982db5)
}

func (e *ContactsGetTopPeers) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Correspondents) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.BotsPm) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.BotsInline) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.PhoneCalls) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.ForwardUsers) {
		flag |= 1 << 4
	}
	if !zero.IsZeroVal(e.ForwardChats) {
		flag |= 1 << 5
	}
	if !zero.IsZeroVal(e.Groups) {
		flag |= 1 << 10
	}
	if !zero.IsZeroVal(e.Channels) {
		flag |= 1 << 15
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutInt(e.Offset)
	buf.PutInt(e.Limit)
	buf.PutInt(e.Hash)
	return buf.Result()
}

func (с *Client) ContactsGetTopPeers(params *ContactsGetTopPeersParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ContactsGetTopPeers")
	}

	resp, ok := data.(ContactsTopPeers)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ContactsResetTopPeerRatingParams struct {
	Category TopPeerCategory `validate:"required"`
	Peer     InputPeer       `validate:"required"`
}

func (e *ContactsResetTopPeerRatingParams) CRC() uint32 {
	return uint32(0x1ae373ac)
}

func (e *ContactsResetTopPeerRating) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Category.Encode())
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

func (с *Client) ContactsResetTopPeerRating(params *ContactsResetTopPeerRatingParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ContactsResetTopPeerRating")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ContactsResetSavedParams struct{}

func (e *ContactsResetSavedParams) CRC() uint32 {
	return uint32(0x879537f1)
}

func (e *ContactsResetSaved) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) ContactsResetSaved() {
	data, err := c.MakeRequest(&ContactsResetSavedParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning ContactsResetSaved")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ContactsGetSavedParams struct{}

func (e *ContactsGetSavedParams) CRC() uint32 {
	return uint32(0x82f1e39f)
}

func (e *ContactsGetSaved) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) ContactsGetSaved() {
	data, err := c.MakeRequest(&ContactsGetSavedParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning ContactsGetSaved")
	}

	resp, ok := data.(*SavedContact)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ContactsToggleTopPeersParams struct {
	Enabled bool `validate:"required"`
}

func (e *ContactsToggleTopPeersParams) CRC() uint32 {
	return uint32(0x8514bdda)
}

func (e *ContactsToggleTopPeers) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutBool(e.Enabled)
	return buf.Result()
}

func (с *Client) ContactsToggleTopPeers(params *ContactsToggleTopPeersParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ContactsToggleTopPeers")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ContactsAddContactParams struct {
	__flagsPosition          struct{}  // flags param position `validate:"required"`
	AddPhonePrivacyException bool      `flag:"0,encoded_in_bitflags"`
	Id                       InputUser `validate:"required"`
	FirstName                string    `validate:"required"`
	LastName                 string    `validate:"required"`
	Phone                    string    `validate:"required"`
}

func (e *ContactsAddContactParams) CRC() uint32 {
	return uint32(0xe8f463d0)
}

func (e *ContactsAddContact) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.AddPhonePrivacyException) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Id.Encode())
	buf.PutString(e.FirstName)
	buf.PutString(e.LastName)
	buf.PutString(e.Phone)
	return buf.Result()
}

func (с *Client) ContactsAddContact(params *ContactsAddContactParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ContactsAddContact")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ContactsAcceptContactParams struct {
	Id InputUser `validate:"required"`
}

func (e *ContactsAcceptContactParams) CRC() uint32 {
	return uint32(0xf831a20f)
}

func (e *ContactsAcceptContact) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Id.Encode())
	return buf.Result()
}

func (с *Client) ContactsAcceptContact(params *ContactsAcceptContactParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ContactsAcceptContact")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ContactsGetLocatedParams struct {
	__flagsPosition struct{}      // flags param position `validate:"required"`
	Background      bool          `flag:"1,encoded_in_bitflags"`
	GeoPoint        InputGeoPoint `validate:"required"`
	SelfExpires     int32         `flag:"0"`
}

func (e *ContactsGetLocatedParams) CRC() uint32 {
	return uint32(0xd348bc44)
}

func (e *ContactsGetLocated) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.SelfExpires) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Background) {
		flag |= 1 << 1
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.GeoPoint.Encode())
	if !zero.IsZeroVal(e.SelfExpires) {
		buf.PutInt(e.SelfExpires)
	}
	return buf.Result()
}

func (с *Client) ContactsGetLocated(params *ContactsGetLocatedParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ContactsGetLocated")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetMessagesParams struct {
	Id []InputMessage `validate:"required"`
}

func (e *MessagesGetMessagesParams) CRC() uint32 {
	return uint32(0x63c66506)
}

func (e *MessagesGetMessages) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Id)
	return buf.Result()
}

func (с *Client) MessagesGetMessages(params *MessagesGetMessagesParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetMessages")
	}

	resp, ok := data.(MessagesMessages)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetDialogsParams struct {
	__flagsPosition struct{}  // flags param position `validate:"required"`
	ExcludePinned   bool      `flag:"0,encoded_in_bitflags"`
	FolderId        int32     `flag:"1"`
	OffsetDate      int32     `validate:"required"`
	OffsetId        int32     `validate:"required"`
	OffsetPeer      InputPeer `validate:"required"`
	Limit           int32     `validate:"required"`
	Hash            int32     `validate:"required"`
}

func (e *MessagesGetDialogsParams) CRC() uint32 {
	return uint32(0xa0ee3b73)
}

func (e *MessagesGetDialogs) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.ExcludePinned) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.FolderId) {
		flag |= 1 << 1
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.FolderId) {
		buf.PutInt(e.FolderId)
	}
	buf.PutInt(e.OffsetDate)
	buf.PutInt(e.OffsetId)
	buf.PutRawBytes(e.OffsetPeer.Encode())
	buf.PutInt(e.Limit)
	buf.PutInt(e.Hash)
	return buf.Result()
}

func (с *Client) MessagesGetDialogs(params *MessagesGetDialogsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetDialogs")
	}

	resp, ok := data.(MessagesDialogs)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetHistoryParams struct {
	Peer       InputPeer `validate:"required"`
	OffsetId   int32     `validate:"required"`
	OffsetDate int32     `validate:"required"`
	AddOffset  int32     `validate:"required"`
	Limit      int32     `validate:"required"`
	MaxId      int32     `validate:"required"`
	MinId      int32     `validate:"required"`
	Hash       int32     `validate:"required"`
}

func (e *MessagesGetHistoryParams) CRC() uint32 {
	return uint32(0xdcbb8260)
}

func (e *MessagesGetHistory) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.OffsetId)
	buf.PutInt(e.OffsetDate)
	buf.PutInt(e.AddOffset)
	buf.PutInt(e.Limit)
	buf.PutInt(e.MaxId)
	buf.PutInt(e.MinId)
	buf.PutInt(e.Hash)
	return buf.Result()
}

func (с *Client) MessagesGetHistory(params *MessagesGetHistoryParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetHistory")
	}

	resp, ok := data.(MessagesMessages)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesSearchParams struct {
	__flagsPosition struct{}       // flags param position `validate:"required"`
	Peer            InputPeer      `validate:"required"`
	Q               string         `validate:"required"`
	FromId          InputUser      `flag:"0"`
	Filter          MessagesFilter `validate:"required"`
	MinDate         int32          `validate:"required"`
	MaxDate         int32          `validate:"required"`
	OffsetId        int32          `validate:"required"`
	AddOffset       int32          `validate:"required"`
	Limit           int32          `validate:"required"`
	MaxId           int32          `validate:"required"`
	MinId           int32          `validate:"required"`
	Hash            int32          `validate:"required"`
}

func (e *MessagesSearchParams) CRC() uint32 {
	return uint32(0x8614ef68)
}

func (e *MessagesSearch) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.FromId) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutString(e.Q)
	if !zero.IsZeroVal(e.FromId) {
		buf.PutRawBytes(e.FromId.Encode())
	}
	buf.PutRawBytes(e.Filter.Encode())
	buf.PutInt(e.MinDate)
	buf.PutInt(e.MaxDate)
	buf.PutInt(e.OffsetId)
	buf.PutInt(e.AddOffset)
	buf.PutInt(e.Limit)
	buf.PutInt(e.MaxId)
	buf.PutInt(e.MinId)
	buf.PutInt(e.Hash)
	return buf.Result()
}

func (с *Client) MessagesSearch(params *MessagesSearchParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesSearch")
	}

	resp, ok := data.(MessagesMessages)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesReadHistoryParams struct {
	Peer  InputPeer `validate:"required"`
	MaxId int32     `validate:"required"`
}

func (e *MessagesReadHistoryParams) CRC() uint32 {
	return uint32(0xe306d3a)
}

func (e *MessagesReadHistory) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.MaxId)
	return buf.Result()
}

func (с *Client) MessagesReadHistory(params *MessagesReadHistoryParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesReadHistory")
	}

	resp, ok := data.(*MessagesAffectedMessages)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesDeleteHistoryParams struct {
	__flagsPosition struct{}  // flags param position `validate:"required"`
	JustClear       bool      `flag:"0,encoded_in_bitflags"`
	Revoke          bool      `flag:"1,encoded_in_bitflags"`
	Peer            InputPeer `validate:"required"`
	MaxId           int32     `validate:"required"`
}

func (e *MessagesDeleteHistoryParams) CRC() uint32 {
	return uint32(0x1c015b09)
}

func (e *MessagesDeleteHistory) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.JustClear) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Revoke) {
		flag |= 1 << 1
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.MaxId)
	return buf.Result()
}

func (с *Client) MessagesDeleteHistory(params *MessagesDeleteHistoryParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesDeleteHistory")
	}

	resp, ok := data.(*MessagesAffectedHistory)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesDeleteMessagesParams struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	Revoke          bool     `flag:"0,encoded_in_bitflags"`
	Id              []int32  `validate:"required"`
}

func (e *MessagesDeleteMessagesParams) CRC() uint32 {
	return uint32(0xe58e95d2)
}

func (e *MessagesDeleteMessages) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Revoke) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutVector(e.Id)
	return buf.Result()
}

func (с *Client) MessagesDeleteMessages(params *MessagesDeleteMessagesParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesDeleteMessages")
	}

	resp, ok := data.(*MessagesAffectedMessages)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesReceivedMessagesParams struct {
	MaxId int32 `validate:"required"`
}

func (e *MessagesReceivedMessagesParams) CRC() uint32 {
	return uint32(0x5a954c0)
}

func (e *MessagesReceivedMessages) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.MaxId)
	return buf.Result()
}

func (с *Client) MessagesReceivedMessages(params *MessagesReceivedMessagesParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesReceivedMessages")
	}

	resp, ok := data.(*ReceivedNotifyMessage)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesSetTypingParams struct {
	Peer   InputPeer         `validate:"required"`
	Action SendMessageAction `validate:"required"`
}

func (e *MessagesSetTypingParams) CRC() uint32 {
	return uint32(0xa3825e50)
}

func (e *MessagesSetTyping) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutRawBytes(e.Action.Encode())
	return buf.Result()
}

func (с *Client) MessagesSetTyping(params *MessagesSetTypingParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesSetTyping")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesSendMessageParams struct {
	__flagsPosition struct{}        // flags param position `validate:"required"`
	NoWebpage       bool            `flag:"1,encoded_in_bitflags"`
	Silent          bool            `flag:"5,encoded_in_bitflags"`
	Background      bool            `flag:"6,encoded_in_bitflags"`
	ClearDraft      bool            `flag:"7,encoded_in_bitflags"`
	Peer            InputPeer       `validate:"required"`
	ReplyToMsgId    int32           `flag:"0"`
	Message         string          `validate:"required"`
	RandomId        int64           `validate:"required"`
	ReplyMarkup     ReplyMarkup     `flag:"2"`
	Entities        []MessageEntity `flag:"3"`
	ScheduleDate    int32           `flag:"10"`
}

func (e *MessagesSendMessageParams) CRC() uint32 {
	return uint32(0x520c3870)
}

func (e *MessagesSendMessage) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.ReplyToMsgId) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.NoWebpage) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.ReplyMarkup) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Entities) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.Silent) {
		flag |= 1 << 5
	}
	if !zero.IsZeroVal(e.Background) {
		flag |= 1 << 6
	}
	if !zero.IsZeroVal(e.ClearDraft) {
		flag |= 1 << 7
	}
	if !zero.IsZeroVal(e.ScheduleDate) {
		flag |= 1 << 10
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Peer.Encode())
	if !zero.IsZeroVal(e.ReplyToMsgId) {
		buf.PutInt(e.ReplyToMsgId)
	}
	buf.PutString(e.Message)
	buf.PutLong(e.RandomId)
	if !zero.IsZeroVal(e.ReplyMarkup) {
		buf.PutRawBytes(e.ReplyMarkup.Encode())
	}
	if !zero.IsZeroVal(e.Entities) {
		buf.PutVector(e.Entities)
	}
	if !zero.IsZeroVal(e.ScheduleDate) {
		buf.PutInt(e.ScheduleDate)
	}
	return buf.Result()
}

func (с *Client) MessagesSendMessage(params *MessagesSendMessageParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesSendMessage")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesSendMediaParams struct {
	__flagsPosition struct{}        // flags param position `validate:"required"`
	Silent          bool            `flag:"5,encoded_in_bitflags"`
	Background      bool            `flag:"6,encoded_in_bitflags"`
	ClearDraft      bool            `flag:"7,encoded_in_bitflags"`
	Peer            InputPeer       `validate:"required"`
	ReplyToMsgId    int32           `flag:"0"`
	Media           InputMedia      `validate:"required"`
	Message         string          `validate:"required"`
	RandomId        int64           `validate:"required"`
	ReplyMarkup     ReplyMarkup     `flag:"2"`
	Entities        []MessageEntity `flag:"3"`
	ScheduleDate    int32           `flag:"10"`
}

func (e *MessagesSendMediaParams) CRC() uint32 {
	return uint32(0x3491eba9)
}

func (e *MessagesSendMedia) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.ReplyToMsgId) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.ReplyMarkup) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Entities) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.Silent) {
		flag |= 1 << 5
	}
	if !zero.IsZeroVal(e.Background) {
		flag |= 1 << 6
	}
	if !zero.IsZeroVal(e.ClearDraft) {
		flag |= 1 << 7
	}
	if !zero.IsZeroVal(e.ScheduleDate) {
		flag |= 1 << 10
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Peer.Encode())
	if !zero.IsZeroVal(e.ReplyToMsgId) {
		buf.PutInt(e.ReplyToMsgId)
	}
	buf.PutRawBytes(e.Media.Encode())
	buf.PutString(e.Message)
	buf.PutLong(e.RandomId)
	if !zero.IsZeroVal(e.ReplyMarkup) {
		buf.PutRawBytes(e.ReplyMarkup.Encode())
	}
	if !zero.IsZeroVal(e.Entities) {
		buf.PutVector(e.Entities)
	}
	if !zero.IsZeroVal(e.ScheduleDate) {
		buf.PutInt(e.ScheduleDate)
	}
	return buf.Result()
}

func (с *Client) MessagesSendMedia(params *MessagesSendMediaParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesSendMedia")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesForwardMessagesParams struct {
	__flagsPosition struct{}  // flags param position `validate:"required"`
	Silent          bool      `flag:"5,encoded_in_bitflags"`
	Background      bool      `flag:"6,encoded_in_bitflags"`
	WithMyScore     bool      `flag:"8,encoded_in_bitflags"`
	Grouped         bool      `flag:"9,encoded_in_bitflags"`
	FromPeer        InputPeer `validate:"required"`
	Id              []int32   `validate:"required"`
	RandomId        []int64   `validate:"required"`
	ToPeer          InputPeer `validate:"required"`
	ScheduleDate    int32     `flag:"10"`
}

func (e *MessagesForwardMessagesParams) CRC() uint32 {
	return uint32(0xd9fee60e)
}

func (e *MessagesForwardMessages) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Silent) {
		flag |= 1 << 5
	}
	if !zero.IsZeroVal(e.Background) {
		flag |= 1 << 6
	}
	if !zero.IsZeroVal(e.WithMyScore) {
		flag |= 1 << 8
	}
	if !zero.IsZeroVal(e.Grouped) {
		flag |= 1 << 9
	}
	if !zero.IsZeroVal(e.ScheduleDate) {
		flag |= 1 << 10
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.FromPeer.Encode())
	buf.PutVector(e.Id)
	buf.PutVector(e.RandomId)
	buf.PutRawBytes(e.ToPeer.Encode())
	if !zero.IsZeroVal(e.ScheduleDate) {
		buf.PutInt(e.ScheduleDate)
	}
	return buf.Result()
}

func (с *Client) MessagesForwardMessages(params *MessagesForwardMessagesParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesForwardMessages")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesReportSpamParams struct {
	Peer InputPeer `validate:"required"`
}

func (e *MessagesReportSpamParams) CRC() uint32 {
	return uint32(0xcf1592db)
}

func (e *MessagesReportSpam) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

func (с *Client) MessagesReportSpam(params *MessagesReportSpamParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesReportSpam")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetPeerSettingsParams struct {
	Peer InputPeer `validate:"required"`
}

func (e *MessagesGetPeerSettingsParams) CRC() uint32 {
	return uint32(0x3672e09c)
}

func (e *MessagesGetPeerSettings) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

func (с *Client) MessagesGetPeerSettings(params *MessagesGetPeerSettingsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetPeerSettings")
	}

	resp, ok := data.(*PeerSettings)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesReportParams struct {
	Peer   InputPeer    `validate:"required"`
	Id     []int32      `validate:"required"`
	Reason ReportReason `validate:"required"`
}

func (e *MessagesReportParams) CRC() uint32 {
	return uint32(0xbd82b658)
}

func (e *MessagesReport) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutVector(e.Id)
	buf.PutRawBytes(e.Reason.Encode())
	return buf.Result()
}

func (с *Client) MessagesReport(params *MessagesReportParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesReport")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetChatsParams struct {
	Id []int32 `validate:"required"`
}

func (e *MessagesGetChatsParams) CRC() uint32 {
	return uint32(0x3c6aa187)
}

func (e *MessagesGetChats) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Id)
	return buf.Result()
}

func (с *Client) MessagesGetChats(params *MessagesGetChatsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetChats")
	}

	resp, ok := data.(MessagesChats)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetFullChatParams struct {
	ChatId int32 `validate:"required"`
}

func (e *MessagesGetFullChatParams) CRC() uint32 {
	return uint32(0x3b831c66)
}

func (e *MessagesGetFullChat) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	return buf.Result()
}

func (с *Client) MessagesGetFullChat(params *MessagesGetFullChatParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetFullChat")
	}

	resp, ok := data.(*MessagesChatFull)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesEditChatTitleParams struct {
	ChatId int32  `validate:"required"`
	Title  string `validate:"required"`
}

func (e *MessagesEditChatTitleParams) CRC() uint32 {
	return uint32(0xdc452855)
}

func (e *MessagesEditChatTitle) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	buf.PutString(e.Title)
	return buf.Result()
}

func (с *Client) MessagesEditChatTitle(params *MessagesEditChatTitleParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesEditChatTitle")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesEditChatPhotoParams struct {
	ChatId int32          `validate:"required"`
	Photo  InputChatPhoto `validate:"required"`
}

func (e *MessagesEditChatPhotoParams) CRC() uint32 {
	return uint32(0xca4c79d8)
}

func (e *MessagesEditChatPhoto) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	buf.PutRawBytes(e.Photo.Encode())
	return buf.Result()
}

func (с *Client) MessagesEditChatPhoto(params *MessagesEditChatPhotoParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesEditChatPhoto")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesAddChatUserParams struct {
	ChatId   int32     `validate:"required"`
	UserId   InputUser `validate:"required"`
	FwdLimit int32     `validate:"required"`
}

func (e *MessagesAddChatUserParams) CRC() uint32 {
	return uint32(0xf9a0aa09)
}

func (e *MessagesAddChatUser) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	buf.PutRawBytes(e.UserId.Encode())
	buf.PutInt(e.FwdLimit)
	return buf.Result()
}

func (с *Client) MessagesAddChatUser(params *MessagesAddChatUserParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesAddChatUser")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesDeleteChatUserParams struct {
	ChatId int32     `validate:"required"`
	UserId InputUser `validate:"required"`
}

func (e *MessagesDeleteChatUserParams) CRC() uint32 {
	return uint32(0xe0611f16)
}

func (e *MessagesDeleteChatUser) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	buf.PutRawBytes(e.UserId.Encode())
	return buf.Result()
}

func (с *Client) MessagesDeleteChatUser(params *MessagesDeleteChatUserParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesDeleteChatUser")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesCreateChatParams struct {
	Users []InputUser `validate:"required"`
	Title string      `validate:"required"`
}

func (e *MessagesCreateChatParams) CRC() uint32 {
	return uint32(0x9cb126e)
}

func (e *MessagesCreateChat) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Users)
	buf.PutString(e.Title)
	return buf.Result()
}

func (с *Client) MessagesCreateChat(params *MessagesCreateChatParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesCreateChat")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetDhConfigParams struct {
	Version      int32 `validate:"required"`
	RandomLength int32 `validate:"required"`
}

func (e *MessagesGetDhConfigParams) CRC() uint32 {
	return uint32(0x26cf8950)
}

func (e *MessagesGetDhConfig) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Version)
	buf.PutInt(e.RandomLength)
	return buf.Result()
}

func (с *Client) MessagesGetDhConfig(params *MessagesGetDhConfigParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetDhConfig")
	}

	resp, ok := data.(MessagesDhConfig)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesRequestEncryptionParams struct {
	UserId   InputUser `validate:"required"`
	RandomId int32     `validate:"required"`
	GA       []byte    `validate:"required"`
}

func (e *MessagesRequestEncryptionParams) CRC() uint32 {
	return uint32(0xf64daf43)
}

func (e *MessagesRequestEncryption) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.UserId.Encode())
	buf.PutInt(e.RandomId)
	buf.PutMessage(e.GA)
	return buf.Result()
}

func (с *Client) MessagesRequestEncryption(params *MessagesRequestEncryptionParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesRequestEncryption")
	}

	resp, ok := data.(EncryptedChat)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesAcceptEncryptionParams struct {
	Peer           *InputEncryptedChat `validate:"required"`
	GB             []byte              `validate:"required"`
	KeyFingerprint int64               `validate:"required"`
}

func (e *MessagesAcceptEncryptionParams) CRC() uint32 {
	return uint32(0x3dbc0415)
}

func (e *MessagesAcceptEncryption) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutMessage(e.GB)
	buf.PutLong(e.KeyFingerprint)
	return buf.Result()
}

func (с *Client) MessagesAcceptEncryption(params *MessagesAcceptEncryptionParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesAcceptEncryption")
	}

	resp, ok := data.(EncryptedChat)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesDiscardEncryptionParams struct {
	ChatId int32 `validate:"required"`
}

func (e *MessagesDiscardEncryptionParams) CRC() uint32 {
	return uint32(0xedd923c5)
}

func (e *MessagesDiscardEncryption) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	return buf.Result()
}

func (с *Client) MessagesDiscardEncryption(params *MessagesDiscardEncryptionParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesDiscardEncryption")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesSetEncryptedTypingParams struct {
	Peer   *InputEncryptedChat `validate:"required"`
	Typing bool                `validate:"required"`
}

func (e *MessagesSetEncryptedTypingParams) CRC() uint32 {
	return uint32(0x791451ed)
}

func (e *MessagesSetEncryptedTyping) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutBool(e.Typing)
	return buf.Result()
}

func (с *Client) MessagesSetEncryptedTyping(params *MessagesSetEncryptedTypingParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesSetEncryptedTyping")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesReadEncryptedHistoryParams struct {
	Peer    *InputEncryptedChat `validate:"required"`
	MaxDate int32               `validate:"required"`
}

func (e *MessagesReadEncryptedHistoryParams) CRC() uint32 {
	return uint32(0x7f4b690a)
}

func (e *MessagesReadEncryptedHistory) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.MaxDate)
	return buf.Result()
}

func (с *Client) MessagesReadEncryptedHistory(params *MessagesReadEncryptedHistoryParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesReadEncryptedHistory")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesSendEncryptedParams struct {
	Peer     *InputEncryptedChat `validate:"required"`
	RandomId int64               `validate:"required"`
	Data     []byte              `validate:"required"`
}

func (e *MessagesSendEncryptedParams) CRC() uint32 {
	return uint32(0xa9776773)
}

func (e *MessagesSendEncrypted) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutLong(e.RandomId)
	buf.PutMessage(e.Data)
	return buf.Result()
}

func (с *Client) MessagesSendEncrypted(params *MessagesSendEncryptedParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesSendEncrypted")
	}

	resp, ok := data.(MessagesSentEncryptedMessage)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesSendEncryptedFileParams struct {
	Peer     *InputEncryptedChat `validate:"required"`
	RandomId int64               `validate:"required"`
	Data     []byte              `validate:"required"`
	File     InputEncryptedFile  `validate:"required"`
}

func (e *MessagesSendEncryptedFileParams) CRC() uint32 {
	return uint32(0x9a901b66)
}

func (e *MessagesSendEncryptedFile) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutLong(e.RandomId)
	buf.PutMessage(e.Data)
	buf.PutRawBytes(e.File.Encode())
	return buf.Result()
}

func (с *Client) MessagesSendEncryptedFile(params *MessagesSendEncryptedFileParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesSendEncryptedFile")
	}

	resp, ok := data.(MessagesSentEncryptedMessage)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesSendEncryptedServiceParams struct {
	Peer     *InputEncryptedChat `validate:"required"`
	RandomId int64               `validate:"required"`
	Data     []byte              `validate:"required"`
}

func (e *MessagesSendEncryptedServiceParams) CRC() uint32 {
	return uint32(0x32d439a4)
}

func (e *MessagesSendEncryptedService) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutLong(e.RandomId)
	buf.PutMessage(e.Data)
	return buf.Result()
}

func (с *Client) MessagesSendEncryptedService(params *MessagesSendEncryptedServiceParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesSendEncryptedService")
	}

	resp, ok := data.(MessagesSentEncryptedMessage)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesReceivedQueueParams struct {
	MaxQts int32 `validate:"required"`
}

func (e *MessagesReceivedQueueParams) CRC() uint32 {
	return uint32(0x55a5bb66)
}

func (e *MessagesReceivedQueue) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.MaxQts)
	return buf.Result()
}

func (с *Client) MessagesReceivedQueue(params *MessagesReceivedQueueParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesReceivedQueue")
	}

	resp, ok := data.(Long)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesReportEncryptedSpamParams struct {
	Peer *InputEncryptedChat `validate:"required"`
}

func (e *MessagesReportEncryptedSpamParams) CRC() uint32 {
	return uint32(0x4b0c8c0f)
}

func (e *MessagesReportEncryptedSpam) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

func (с *Client) MessagesReportEncryptedSpam(params *MessagesReportEncryptedSpamParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesReportEncryptedSpam")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesReadMessageContentsParams struct {
	Id []int32 `validate:"required"`
}

func (e *MessagesReadMessageContentsParams) CRC() uint32 {
	return uint32(0x36a73f77)
}

func (e *MessagesReadMessageContents) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Id)
	return buf.Result()
}

func (с *Client) MessagesReadMessageContents(params *MessagesReadMessageContentsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesReadMessageContents")
	}

	resp, ok := data.(*MessagesAffectedMessages)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetStickersParams struct {
	Emoticon string `validate:"required"`
	Hash     int32  `validate:"required"`
}

func (e *MessagesGetStickersParams) CRC() uint32 {
	return uint32(0x43d4f2c)
}

func (e *MessagesGetStickers) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Emoticon)
	buf.PutInt(e.Hash)
	return buf.Result()
}

func (с *Client) MessagesGetStickers(params *MessagesGetStickersParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetStickers")
	}

	resp, ok := data.(MessagesStickers)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetAllStickersParams struct {
	Hash int32 `validate:"required"`
}

func (e *MessagesGetAllStickersParams) CRC() uint32 {
	return uint32(0x1c9618b1)
}

func (e *MessagesGetAllStickers) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Hash)
	return buf.Result()
}

func (с *Client) MessagesGetAllStickers(params *MessagesGetAllStickersParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetAllStickers")
	}

	resp, ok := data.(MessagesAllStickers)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetWebPagePreviewParams struct {
	__flagsPosition struct{}        // flags param position `validate:"required"`
	Message         string          `validate:"required"`
	Entities        []MessageEntity `flag:"3"`
}

func (e *MessagesGetWebPagePreviewParams) CRC() uint32 {
	return uint32(0x8b68b0cc)
}

func (e *MessagesGetWebPagePreview) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Entities) {
		flag |= 1 << 3
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutString(e.Message)
	if !zero.IsZeroVal(e.Entities) {
		buf.PutVector(e.Entities)
	}
	return buf.Result()
}

func (с *Client) MessagesGetWebPagePreview(params *MessagesGetWebPagePreviewParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetWebPagePreview")
	}

	resp, ok := data.(MessageMedia)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesExportChatInviteParams struct {
	Peer InputPeer `validate:"required"`
}

func (e *MessagesExportChatInviteParams) CRC() uint32 {
	return uint32(0xdf7534c)
}

func (e *MessagesExportChatInvite) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

func (с *Client) MessagesExportChatInvite(params *MessagesExportChatInviteParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesExportChatInvite")
	}

	resp, ok := data.(ExportedChatInvite)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesCheckChatInviteParams struct {
	Hash string `validate:"required"`
}

func (e *MessagesCheckChatInviteParams) CRC() uint32 {
	return uint32(0x3eadb1bb)
}

func (e *MessagesCheckChatInvite) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Hash)
	return buf.Result()
}

func (с *Client) MessagesCheckChatInvite(params *MessagesCheckChatInviteParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesCheckChatInvite")
	}

	resp, ok := data.(ChatInvite)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesImportChatInviteParams struct {
	Hash string `validate:"required"`
}

func (e *MessagesImportChatInviteParams) CRC() uint32 {
	return uint32(0x6c50051c)
}

func (e *MessagesImportChatInvite) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Hash)
	return buf.Result()
}

func (с *Client) MessagesImportChatInvite(params *MessagesImportChatInviteParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesImportChatInvite")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetStickerSetParams struct {
	Stickerset InputStickerSet `validate:"required"`
}

func (e *MessagesGetStickerSetParams) CRC() uint32 {
	return uint32(0x2619a90e)
}

func (e *MessagesGetStickerSet) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Stickerset.Encode())
	return buf.Result()
}

func (с *Client) MessagesGetStickerSet(params *MessagesGetStickerSetParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetStickerSet")
	}

	resp, ok := data.(*MessagesStickerSet)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesInstallStickerSetParams struct {
	Stickerset InputStickerSet `validate:"required"`
	Archived   bool            `validate:"required"`
}

func (e *MessagesInstallStickerSetParams) CRC() uint32 {
	return uint32(0xc78fe460)
}

func (e *MessagesInstallStickerSet) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Stickerset.Encode())
	buf.PutBool(e.Archived)
	return buf.Result()
}

func (с *Client) MessagesInstallStickerSet(params *MessagesInstallStickerSetParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesInstallStickerSet")
	}

	resp, ok := data.(MessagesStickerSetInstallResult)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesUninstallStickerSetParams struct {
	Stickerset InputStickerSet `validate:"required"`
}

func (e *MessagesUninstallStickerSetParams) CRC() uint32 {
	return uint32(0xf96e55de)
}

func (e *MessagesUninstallStickerSet) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Stickerset.Encode())
	return buf.Result()
}

func (с *Client) MessagesUninstallStickerSet(params *MessagesUninstallStickerSetParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesUninstallStickerSet")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesStartBotParams struct {
	Bot        InputUser `validate:"required"`
	Peer       InputPeer `validate:"required"`
	RandomId   int64     `validate:"required"`
	StartParam string    `validate:"required"`
}

func (e *MessagesStartBotParams) CRC() uint32 {
	return uint32(0xe6df7378)
}

func (e *MessagesStartBot) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Bot.Encode())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutLong(e.RandomId)
	buf.PutString(e.StartParam)
	return buf.Result()
}

func (с *Client) MessagesStartBot(params *MessagesStartBotParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesStartBot")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetMessagesViewsParams struct {
	Peer      InputPeer `validate:"required"`
	Id        []int32   `validate:"required"`
	Increment bool      `validate:"required"`
}

func (e *MessagesGetMessagesViewsParams) CRC() uint32 {
	return uint32(0xc4c8a55d)
}

func (e *MessagesGetMessagesViews) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutVector(e.Id)
	buf.PutBool(e.Increment)
	return buf.Result()
}

func (с *Client) MessagesGetMessagesViews(params *MessagesGetMessagesViewsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetMessagesViews")
	}

	resp, ok := data.(Int)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesEditChatAdminParams struct {
	ChatId  int32     `validate:"required"`
	UserId  InputUser `validate:"required"`
	IsAdmin bool      `validate:"required"`
}

func (e *MessagesEditChatAdminParams) CRC() uint32 {
	return uint32(0xa9e69f2e)
}

func (e *MessagesEditChatAdmin) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	buf.PutRawBytes(e.UserId.Encode())
	buf.PutBool(e.IsAdmin)
	return buf.Result()
}

func (с *Client) MessagesEditChatAdmin(params *MessagesEditChatAdminParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesEditChatAdmin")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesMigrateChatParams struct {
	ChatId int32 `validate:"required"`
}

func (e *MessagesMigrateChatParams) CRC() uint32 {
	return uint32(0x15a3b8e3)
}

func (e *MessagesMigrateChat) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	return buf.Result()
}

func (с *Client) MessagesMigrateChat(params *MessagesMigrateChatParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesMigrateChat")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesSearchGlobalParams struct {
	__flagsPosition struct{}  // flags param position `validate:"required"`
	FolderId        int32     `flag:"0"`
	Q               string    `validate:"required"`
	OffsetRate      int32     `validate:"required"`
	OffsetPeer      InputPeer `validate:"required"`
	OffsetId        int32     `validate:"required"`
	Limit           int32     `validate:"required"`
}

func (e *MessagesSearchGlobalParams) CRC() uint32 {
	return uint32(0xbf7225a4)
}

func (e *MessagesSearchGlobal) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.FolderId) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.FolderId) {
		buf.PutInt(e.FolderId)
	}
	buf.PutString(e.Q)
	buf.PutInt(e.OffsetRate)
	buf.PutRawBytes(e.OffsetPeer.Encode())
	buf.PutInt(e.OffsetId)
	buf.PutInt(e.Limit)
	return buf.Result()
}

func (с *Client) MessagesSearchGlobal(params *MessagesSearchGlobalParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesSearchGlobal")
	}

	resp, ok := data.(MessagesMessages)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesReorderStickerSetsParams struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	Masks           bool     `flag:"0,encoded_in_bitflags"`
	Order           []int64  `validate:"required"`
}

func (e *MessagesReorderStickerSetsParams) CRC() uint32 {
	return uint32(0x78337739)
}

func (e *MessagesReorderStickerSets) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Masks) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutVector(e.Order)
	return buf.Result()
}

func (с *Client) MessagesReorderStickerSets(params *MessagesReorderStickerSetsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesReorderStickerSets")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetDocumentByHashParams struct {
	Sha256   []byte `validate:"required"`
	Size     int32  `validate:"required"`
	MimeType string `validate:"required"`
}

func (e *MessagesGetDocumentByHashParams) CRC() uint32 {
	return uint32(0x338e2464)
}

func (e *MessagesGetDocumentByHash) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Sha256)
	buf.PutInt(e.Size)
	buf.PutString(e.MimeType)
	return buf.Result()
}

func (с *Client) MessagesGetDocumentByHash(params *MessagesGetDocumentByHashParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetDocumentByHash")
	}

	resp, ok := data.(Document)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetSavedGifsParams struct {
	Hash int32 `validate:"required"`
}

func (e *MessagesGetSavedGifsParams) CRC() uint32 {
	return uint32(0x83bf3d52)
}

func (e *MessagesGetSavedGifs) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Hash)
	return buf.Result()
}

func (с *Client) MessagesGetSavedGifs(params *MessagesGetSavedGifsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetSavedGifs")
	}

	resp, ok := data.(MessagesSavedGifs)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesSaveGifParams struct {
	Id     InputDocument `validate:"required"`
	Unsave bool          `validate:"required"`
}

func (e *MessagesSaveGifParams) CRC() uint32 {
	return uint32(0x327a30cb)
}

func (e *MessagesSaveGif) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Id.Encode())
	buf.PutBool(e.Unsave)
	return buf.Result()
}

func (с *Client) MessagesSaveGif(params *MessagesSaveGifParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesSaveGif")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetInlineBotResultsParams struct {
	__flagsPosition struct{}      // flags param position `validate:"required"`
	Bot             InputUser     `validate:"required"`
	Peer            InputPeer     `validate:"required"`
	GeoPoint        InputGeoPoint `flag:"0"`
	Query           string        `validate:"required"`
	Offset          string        `validate:"required"`
}

func (e *MessagesGetInlineBotResultsParams) CRC() uint32 {
	return uint32(0x514e999d)
}

func (e *MessagesGetInlineBotResults) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.GeoPoint) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Bot.Encode())
	buf.PutRawBytes(e.Peer.Encode())
	if !zero.IsZeroVal(e.GeoPoint) {
		buf.PutRawBytes(e.GeoPoint.Encode())
	}
	buf.PutString(e.Query)
	buf.PutString(e.Offset)
	return buf.Result()
}

func (с *Client) MessagesGetInlineBotResults(params *MessagesGetInlineBotResultsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetInlineBotResults")
	}

	resp, ok := data.(*MessagesBotResults)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesSetInlineBotResultsParams struct {
	__flagsPosition struct{}               // flags param position `validate:"required"`
	Gallery         bool                   `flag:"0,encoded_in_bitflags"`
	Private         bool                   `flag:"1,encoded_in_bitflags"`
	QueryId         int64                  `validate:"required"`
	Results         []InputBotInlineResult `validate:"required"`
	CacheTime       int32                  `validate:"required"`
	NextOffset      string                 `flag:"2"`
	SwitchPm        *InlineBotSwitchPM     `flag:"3"`
}

func (e *MessagesSetInlineBotResultsParams) CRC() uint32 {
	return uint32(0xeb5ea206)
}

func (e *MessagesSetInlineBotResults) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Gallery) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Private) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.NextOffset) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.SwitchPm) {
		flag |= 1 << 3
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutLong(e.QueryId)
	buf.PutVector(e.Results)
	buf.PutInt(e.CacheTime)
	if !zero.IsZeroVal(e.NextOffset) {
		buf.PutString(e.NextOffset)
	}
	if !zero.IsZeroVal(e.SwitchPm) {
		buf.PutRawBytes(e.SwitchPm.Encode())
	}
	return buf.Result()
}

func (с *Client) MessagesSetInlineBotResults(params *MessagesSetInlineBotResultsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesSetInlineBotResults")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesSendInlineBotResultParams struct {
	__flagsPosition struct{}  // flags param position `validate:"required"`
	Silent          bool      `flag:"5,encoded_in_bitflags"`
	Background      bool      `flag:"6,encoded_in_bitflags"`
	ClearDraft      bool      `flag:"7,encoded_in_bitflags"`
	HideVia         bool      `flag:"11,encoded_in_bitflags"`
	Peer            InputPeer `validate:"required"`
	ReplyToMsgId    int32     `flag:"0"`
	RandomId        int64     `validate:"required"`
	QueryId         int64     `validate:"required"`
	Id              string    `validate:"required"`
	ScheduleDate    int32     `flag:"10"`
}

func (e *MessagesSendInlineBotResultParams) CRC() uint32 {
	return uint32(0x220815b0)
}

func (e *MessagesSendInlineBotResult) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.ReplyToMsgId) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Silent) {
		flag |= 1 << 5
	}
	if !zero.IsZeroVal(e.Background) {
		flag |= 1 << 6
	}
	if !zero.IsZeroVal(e.ClearDraft) {
		flag |= 1 << 7
	}
	if !zero.IsZeroVal(e.ScheduleDate) {
		flag |= 1 << 10
	}
	if !zero.IsZeroVal(e.HideVia) {
		flag |= 1 << 11
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Peer.Encode())
	if !zero.IsZeroVal(e.ReplyToMsgId) {
		buf.PutInt(e.ReplyToMsgId)
	}
	buf.PutLong(e.RandomId)
	buf.PutLong(e.QueryId)
	buf.PutString(e.Id)
	if !zero.IsZeroVal(e.ScheduleDate) {
		buf.PutInt(e.ScheduleDate)
	}
	return buf.Result()
}

func (с *Client) MessagesSendInlineBotResult(params *MessagesSendInlineBotResultParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesSendInlineBotResult")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetMessageEditDataParams struct {
	Peer InputPeer `validate:"required"`
	Id   int32     `validate:"required"`
}

func (e *MessagesGetMessageEditDataParams) CRC() uint32 {
	return uint32(0xfda68d36)
}

func (e *MessagesGetMessageEditData) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.Id)
	return buf.Result()
}

func (с *Client) MessagesGetMessageEditData(params *MessagesGetMessageEditDataParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetMessageEditData")
	}

	resp, ok := data.(*MessagesMessageEditData)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesEditMessageParams struct {
	__flagsPosition struct{}        // flags param position `validate:"required"`
	NoWebpage       bool            `flag:"1,encoded_in_bitflags"`
	Peer            InputPeer       `validate:"required"`
	Id              int32           `validate:"required"`
	Message         string          `flag:"11"`
	Media           InputMedia      `flag:"14"`
	ReplyMarkup     ReplyMarkup     `flag:"2"`
	Entities        []MessageEntity `flag:"3"`
	ScheduleDate    int32           `flag:"15"`
}

func (e *MessagesEditMessageParams) CRC() uint32 {
	return uint32(0x48f71778)
}

func (e *MessagesEditMessage) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.NoWebpage) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.ReplyMarkup) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Entities) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.Message) {
		flag |= 1 << 11
	}
	if !zero.IsZeroVal(e.Media) {
		flag |= 1 << 14
	}
	if !zero.IsZeroVal(e.ScheduleDate) {
		flag |= 1 << 15
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.Id)
	if !zero.IsZeroVal(e.Message) {
		buf.PutString(e.Message)
	}
	if !zero.IsZeroVal(e.Media) {
		buf.PutRawBytes(e.Media.Encode())
	}
	if !zero.IsZeroVal(e.ReplyMarkup) {
		buf.PutRawBytes(e.ReplyMarkup.Encode())
	}
	if !zero.IsZeroVal(e.Entities) {
		buf.PutVector(e.Entities)
	}
	if !zero.IsZeroVal(e.ScheduleDate) {
		buf.PutInt(e.ScheduleDate)
	}
	return buf.Result()
}

func (с *Client) MessagesEditMessage(params *MessagesEditMessageParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesEditMessage")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesEditInlineBotMessageParams struct {
	__flagsPosition struct{}                 // flags param position `validate:"required"`
	NoWebpage       bool                     `flag:"1,encoded_in_bitflags"`
	Id              *InputBotInlineMessageID `validate:"required"`
	Message         string                   `flag:"11"`
	Media           InputMedia               `flag:"14"`
	ReplyMarkup     ReplyMarkup              `flag:"2"`
	Entities        []MessageEntity          `flag:"3"`
}

func (e *MessagesEditInlineBotMessageParams) CRC() uint32 {
	return uint32(0x83557dba)
}

func (e *MessagesEditInlineBotMessage) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.NoWebpage) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.ReplyMarkup) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Entities) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.Message) {
		flag |= 1 << 11
	}
	if !zero.IsZeroVal(e.Media) {
		flag |= 1 << 14
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Id.Encode())
	if !zero.IsZeroVal(e.Message) {
		buf.PutString(e.Message)
	}
	if !zero.IsZeroVal(e.Media) {
		buf.PutRawBytes(e.Media.Encode())
	}
	if !zero.IsZeroVal(e.ReplyMarkup) {
		buf.PutRawBytes(e.ReplyMarkup.Encode())
	}
	if !zero.IsZeroVal(e.Entities) {
		buf.PutVector(e.Entities)
	}
	return buf.Result()
}

func (с *Client) MessagesEditInlineBotMessage(params *MessagesEditInlineBotMessageParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesEditInlineBotMessage")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetBotCallbackAnswerParams struct {
	__flagsPosition struct{}  // flags param position `validate:"required"`
	Game            bool      `flag:"1,encoded_in_bitflags"`
	Peer            InputPeer `validate:"required"`
	MsgId           int32     `validate:"required"`
	Data            []byte    `flag:"0"`
}

func (e *MessagesGetBotCallbackAnswerParams) CRC() uint32 {
	return uint32(0x810a9fec)
}

func (e *MessagesGetBotCallbackAnswer) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Data) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Game) {
		flag |= 1 << 1
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.MsgId)
	if !zero.IsZeroVal(e.Data) {
		buf.PutMessage(e.Data)
	}
	return buf.Result()
}

func (с *Client) MessagesGetBotCallbackAnswer(params *MessagesGetBotCallbackAnswerParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetBotCallbackAnswer")
	}

	resp, ok := data.(*MessagesBotCallbackAnswer)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesSetBotCallbackAnswerParams struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	Alert           bool     `flag:"1,encoded_in_bitflags"`
	QueryId         int64    `validate:"required"`
	Message         string   `flag:"0"`
	Url             string   `flag:"2"`
	CacheTime       int32    `validate:"required"`
}

func (e *MessagesSetBotCallbackAnswerParams) CRC() uint32 {
	return uint32(0xd58f130a)
}

func (e *MessagesSetBotCallbackAnswer) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Message) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Alert) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Url) {
		flag |= 1 << 2
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutLong(e.QueryId)
	if !zero.IsZeroVal(e.Message) {
		buf.PutString(e.Message)
	}
	if !zero.IsZeroVal(e.Url) {
		buf.PutString(e.Url)
	}
	buf.PutInt(e.CacheTime)
	return buf.Result()
}

func (с *Client) MessagesSetBotCallbackAnswer(params *MessagesSetBotCallbackAnswerParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesSetBotCallbackAnswer")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetPeerDialogsParams struct {
	Peers []InputDialogPeer `validate:"required"`
}

func (e *MessagesGetPeerDialogsParams) CRC() uint32 {
	return uint32(0xe470bcfd)
}

func (e *MessagesGetPeerDialogs) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Peers)
	return buf.Result()
}

func (с *Client) MessagesGetPeerDialogs(params *MessagesGetPeerDialogsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetPeerDialogs")
	}

	resp, ok := data.(*MessagesPeerDialogs)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesSaveDraftParams struct {
	__flagsPosition struct{}        // flags param position `validate:"required"`
	NoWebpage       bool            `flag:"1,encoded_in_bitflags"`
	ReplyToMsgId    int32           `flag:"0"`
	Peer            InputPeer       `validate:"required"`
	Message         string          `validate:"required"`
	Entities        []MessageEntity `flag:"3"`
}

func (e *MessagesSaveDraftParams) CRC() uint32 {
	return uint32(0xbc39e14b)
}

func (e *MessagesSaveDraft) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.ReplyToMsgId) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.NoWebpage) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Entities) {
		flag |= 1 << 3
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.ReplyToMsgId) {
		buf.PutInt(e.ReplyToMsgId)
	}
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutString(e.Message)
	if !zero.IsZeroVal(e.Entities) {
		buf.PutVector(e.Entities)
	}
	return buf.Result()
}

func (с *Client) MessagesSaveDraft(params *MessagesSaveDraftParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesSaveDraft")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetAllDraftsParams struct{}

func (e *MessagesGetAllDraftsParams) CRC() uint32 {
	return uint32(0x6a3f8d65)
}

func (e *MessagesGetAllDrafts) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) MessagesGetAllDrafts() {
	data, err := c.MakeRequest(&MessagesGetAllDraftsParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetAllDrafts")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetFeaturedStickersParams struct {
	Hash int32 `validate:"required"`
}

func (e *MessagesGetFeaturedStickersParams) CRC() uint32 {
	return uint32(0x2dacca4f)
}

func (e *MessagesGetFeaturedStickers) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Hash)
	return buf.Result()
}

func (с *Client) MessagesGetFeaturedStickers(params *MessagesGetFeaturedStickersParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetFeaturedStickers")
	}

	resp, ok := data.(MessagesFeaturedStickers)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesReadFeaturedStickersParams struct {
	Id []int64 `validate:"required"`
}

func (e *MessagesReadFeaturedStickersParams) CRC() uint32 {
	return uint32(0x5b118126)
}

func (e *MessagesReadFeaturedStickers) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Id)
	return buf.Result()
}

func (с *Client) MessagesReadFeaturedStickers(params *MessagesReadFeaturedStickersParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesReadFeaturedStickers")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetRecentStickersParams struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	Attached        bool     `flag:"0,encoded_in_bitflags"`
	Hash            int32    `validate:"required"`
}

func (e *MessagesGetRecentStickersParams) CRC() uint32 {
	return uint32(0x5ea192c9)
}

func (e *MessagesGetRecentStickers) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Attached) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutInt(e.Hash)
	return buf.Result()
}

func (с *Client) MessagesGetRecentStickers(params *MessagesGetRecentStickersParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetRecentStickers")
	}

	resp, ok := data.(MessagesRecentStickers)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesSaveRecentStickerParams struct {
	__flagsPosition struct{}      // flags param position `validate:"required"`
	Attached        bool          `flag:"0,encoded_in_bitflags"`
	Id              InputDocument `validate:"required"`
	Unsave          bool          `validate:"required"`
}

func (e *MessagesSaveRecentStickerParams) CRC() uint32 {
	return uint32(0x392718f8)
}

func (e *MessagesSaveRecentSticker) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Attached) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Id.Encode())
	buf.PutBool(e.Unsave)
	return buf.Result()
}

func (с *Client) MessagesSaveRecentSticker(params *MessagesSaveRecentStickerParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesSaveRecentSticker")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesClearRecentStickersParams struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	Attached        bool     `flag:"0,encoded_in_bitflags"`
}

func (e *MessagesClearRecentStickersParams) CRC() uint32 {
	return uint32(0x8999602d)
}

func (e *MessagesClearRecentStickers) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Attached) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	return buf.Result()
}

func (с *Client) MessagesClearRecentStickers(params *MessagesClearRecentStickersParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesClearRecentStickers")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetArchivedStickersParams struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	Masks           bool     `flag:"0,encoded_in_bitflags"`
	OffsetId        int64    `validate:"required"`
	Limit           int32    `validate:"required"`
}

func (e *MessagesGetArchivedStickersParams) CRC() uint32 {
	return uint32(0x57f17692)
}

func (e *MessagesGetArchivedStickers) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Masks) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutLong(e.OffsetId)
	buf.PutInt(e.Limit)
	return buf.Result()
}

func (с *Client) MessagesGetArchivedStickers(params *MessagesGetArchivedStickersParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetArchivedStickers")
	}

	resp, ok := data.(*MessagesArchivedStickers)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetMaskStickersParams struct {
	Hash int32 `validate:"required"`
}

func (e *MessagesGetMaskStickersParams) CRC() uint32 {
	return uint32(0x65b8c79f)
}

func (e *MessagesGetMaskStickers) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Hash)
	return buf.Result()
}

func (с *Client) MessagesGetMaskStickers(params *MessagesGetMaskStickersParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetMaskStickers")
	}

	resp, ok := data.(MessagesAllStickers)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetAttachedStickersParams struct {
	Media InputStickeredMedia `validate:"required"`
}

func (e *MessagesGetAttachedStickersParams) CRC() uint32 {
	return uint32(0xcc5b67cc)
}

func (e *MessagesGetAttachedStickers) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Media.Encode())
	return buf.Result()
}

func (с *Client) MessagesGetAttachedStickers(params *MessagesGetAttachedStickersParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetAttachedStickers")
	}

	resp, ok := data.(StickerSetCovered)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesSetGameScoreParams struct {
	__flagsPosition struct{}  // flags param position `validate:"required"`
	EditMessage     bool      `flag:"0,encoded_in_bitflags"`
	Force           bool      `flag:"1,encoded_in_bitflags"`
	Peer            InputPeer `validate:"required"`
	Id              int32     `validate:"required"`
	UserId          InputUser `validate:"required"`
	Score           int32     `validate:"required"`
}

func (e *MessagesSetGameScoreParams) CRC() uint32 {
	return uint32(0x8ef8ecc0)
}

func (e *MessagesSetGameScore) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.EditMessage) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Force) {
		flag |= 1 << 1
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.Id)
	buf.PutRawBytes(e.UserId.Encode())
	buf.PutInt(e.Score)
	return buf.Result()
}

func (с *Client) MessagesSetGameScore(params *MessagesSetGameScoreParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesSetGameScore")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesSetInlineGameScoreParams struct {
	__flagsPosition struct{}                 // flags param position `validate:"required"`
	EditMessage     bool                     `flag:"0,encoded_in_bitflags"`
	Force           bool                     `flag:"1,encoded_in_bitflags"`
	Id              *InputBotInlineMessageID `validate:"required"`
	UserId          InputUser                `validate:"required"`
	Score           int32                    `validate:"required"`
}

func (e *MessagesSetInlineGameScoreParams) CRC() uint32 {
	return uint32(0x15ad9f64)
}

func (e *MessagesSetInlineGameScore) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.EditMessage) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Force) {
		flag |= 1 << 1
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Id.Encode())
	buf.PutRawBytes(e.UserId.Encode())
	buf.PutInt(e.Score)
	return buf.Result()
}

func (с *Client) MessagesSetInlineGameScore(params *MessagesSetInlineGameScoreParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesSetInlineGameScore")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetGameHighScoresParams struct {
	Peer   InputPeer `validate:"required"`
	Id     int32     `validate:"required"`
	UserId InputUser `validate:"required"`
}

func (e *MessagesGetGameHighScoresParams) CRC() uint32 {
	return uint32(0xe822649d)
}

func (e *MessagesGetGameHighScores) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.Id)
	buf.PutRawBytes(e.UserId.Encode())
	return buf.Result()
}

func (с *Client) MessagesGetGameHighScores(params *MessagesGetGameHighScoresParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetGameHighScores")
	}

	resp, ok := data.(*MessagesHighScores)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetInlineGameHighScoresParams struct {
	Id     *InputBotInlineMessageID `validate:"required"`
	UserId InputUser                `validate:"required"`
}

func (e *MessagesGetInlineGameHighScoresParams) CRC() uint32 {
	return uint32(0xf635e1b)
}

func (e *MessagesGetInlineGameHighScores) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Id.Encode())
	buf.PutRawBytes(e.UserId.Encode())
	return buf.Result()
}

func (с *Client) MessagesGetInlineGameHighScores(params *MessagesGetInlineGameHighScoresParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetInlineGameHighScores")
	}

	resp, ok := data.(*MessagesHighScores)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetCommonChatsParams struct {
	UserId InputUser `validate:"required"`
	MaxId  int32     `validate:"required"`
	Limit  int32     `validate:"required"`
}

func (e *MessagesGetCommonChatsParams) CRC() uint32 {
	return uint32(0xd0a48c4)
}

func (e *MessagesGetCommonChats) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.UserId.Encode())
	buf.PutInt(e.MaxId)
	buf.PutInt(e.Limit)
	return buf.Result()
}

func (с *Client) MessagesGetCommonChats(params *MessagesGetCommonChatsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetCommonChats")
	}

	resp, ok := data.(MessagesChats)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetAllChatsParams struct {
	ExceptIds []int32 `validate:"required"`
}

func (e *MessagesGetAllChatsParams) CRC() uint32 {
	return uint32(0xeba80ff0)
}

func (e *MessagesGetAllChats) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.ExceptIds)
	return buf.Result()
}

func (с *Client) MessagesGetAllChats(params *MessagesGetAllChatsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetAllChats")
	}

	resp, ok := data.(MessagesChats)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetWebPageParams struct {
	Url  string `validate:"required"`
	Hash int32  `validate:"required"`
}

func (e *MessagesGetWebPageParams) CRC() uint32 {
	return uint32(0x32ca8f91)
}

func (e *MessagesGetWebPage) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Url)
	buf.PutInt(e.Hash)
	return buf.Result()
}

func (с *Client) MessagesGetWebPage(params *MessagesGetWebPageParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetWebPage")
	}

	resp, ok := data.(WebPage)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesToggleDialogPinParams struct {
	__flagsPosition struct{}        // flags param position `validate:"required"`
	Pinned          bool            `flag:"0,encoded_in_bitflags"`
	Peer            InputDialogPeer `validate:"required"`
}

func (e *MessagesToggleDialogPinParams) CRC() uint32 {
	return uint32(0xa731e257)
}

func (e *MessagesToggleDialogPin) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Pinned) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

func (с *Client) MessagesToggleDialogPin(params *MessagesToggleDialogPinParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesToggleDialogPin")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesReorderPinnedDialogsParams struct {
	__flagsPosition struct{}          // flags param position `validate:"required"`
	Force           bool              `flag:"0,encoded_in_bitflags"`
	FolderId        int32             `validate:"required"`
	Order           []InputDialogPeer `validate:"required"`
}

func (e *MessagesReorderPinnedDialogsParams) CRC() uint32 {
	return uint32(0x3b1adf37)
}

func (e *MessagesReorderPinnedDialogs) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Force) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutInt(e.FolderId)
	buf.PutVector(e.Order)
	return buf.Result()
}

func (с *Client) MessagesReorderPinnedDialogs(params *MessagesReorderPinnedDialogsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesReorderPinnedDialogs")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetPinnedDialogsParams struct {
	FolderId int32 `validate:"required"`
}

func (e *MessagesGetPinnedDialogsParams) CRC() uint32 {
	return uint32(0xd6b94df2)
}

func (e *MessagesGetPinnedDialogs) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.FolderId)
	return buf.Result()
}

func (с *Client) MessagesGetPinnedDialogs(params *MessagesGetPinnedDialogsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetPinnedDialogs")
	}

	resp, ok := data.(*MessagesPeerDialogs)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesSetBotShippingResultsParams struct {
	__flagsPosition struct{}          // flags param position `validate:"required"`
	QueryId         int64             `validate:"required"`
	Error           string            `flag:"0"`
	ShippingOptions []*ShippingOption `flag:"1"`
}

func (e *MessagesSetBotShippingResultsParams) CRC() uint32 {
	return uint32(0xe5f672fa)
}

func (e *MessagesSetBotShippingResults) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Error) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.ShippingOptions) {
		flag |= 1 << 1
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutLong(e.QueryId)
	if !zero.IsZeroVal(e.Error) {
		buf.PutString(e.Error)
	}
	if !zero.IsZeroVal(e.ShippingOptions) {
		buf.PutVector(e.ShippingOptions)
	}
	return buf.Result()
}

func (с *Client) MessagesSetBotShippingResults(params *MessagesSetBotShippingResultsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesSetBotShippingResults")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesSetBotPrecheckoutResultsParams struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	Success         bool     `flag:"1,encoded_in_bitflags"`
	QueryId         int64    `validate:"required"`
	Error           string   `flag:"0"`
}

func (e *MessagesSetBotPrecheckoutResultsParams) CRC() uint32 {
	return uint32(0x9c2dd95)
}

func (e *MessagesSetBotPrecheckoutResults) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Error) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Success) {
		flag |= 1 << 1
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutLong(e.QueryId)
	if !zero.IsZeroVal(e.Error) {
		buf.PutString(e.Error)
	}
	return buf.Result()
}

func (с *Client) MessagesSetBotPrecheckoutResults(params *MessagesSetBotPrecheckoutResultsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesSetBotPrecheckoutResults")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesUploadMediaParams struct {
	Peer  InputPeer  `validate:"required"`
	Media InputMedia `validate:"required"`
}

func (e *MessagesUploadMediaParams) CRC() uint32 {
	return uint32(0x519bc2b1)
}

func (e *MessagesUploadMedia) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutRawBytes(e.Media.Encode())
	return buf.Result()
}

func (с *Client) MessagesUploadMedia(params *MessagesUploadMediaParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesUploadMedia")
	}

	resp, ok := data.(MessageMedia)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesSendScreenshotNotificationParams struct {
	Peer         InputPeer `validate:"required"`
	ReplyToMsgId int32     `validate:"required"`
	RandomId     int64     `validate:"required"`
}

func (e *MessagesSendScreenshotNotificationParams) CRC() uint32 {
	return uint32(0xc97df020)
}

func (e *MessagesSendScreenshotNotification) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.ReplyToMsgId)
	buf.PutLong(e.RandomId)
	return buf.Result()
}

func (с *Client) MessagesSendScreenshotNotification(params *MessagesSendScreenshotNotificationParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesSendScreenshotNotification")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetFavedStickersParams struct {
	Hash int32 `validate:"required"`
}

func (e *MessagesGetFavedStickersParams) CRC() uint32 {
	return uint32(0x21ce0b0e)
}

func (e *MessagesGetFavedStickers) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Hash)
	return buf.Result()
}

func (с *Client) MessagesGetFavedStickers(params *MessagesGetFavedStickersParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetFavedStickers")
	}

	resp, ok := data.(MessagesFavedStickers)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesFaveStickerParams struct {
	Id     InputDocument `validate:"required"`
	Unfave bool          `validate:"required"`
}

func (e *MessagesFaveStickerParams) CRC() uint32 {
	return uint32(0xb9ffc55b)
}

func (e *MessagesFaveSticker) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Id.Encode())
	buf.PutBool(e.Unfave)
	return buf.Result()
}

func (с *Client) MessagesFaveSticker(params *MessagesFaveStickerParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesFaveSticker")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetUnreadMentionsParams struct {
	Peer      InputPeer `validate:"required"`
	OffsetId  int32     `validate:"required"`
	AddOffset int32     `validate:"required"`
	Limit     int32     `validate:"required"`
	MaxId     int32     `validate:"required"`
	MinId     int32     `validate:"required"`
}

func (e *MessagesGetUnreadMentionsParams) CRC() uint32 {
	return uint32(0x46578472)
}

func (e *MessagesGetUnreadMentions) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.OffsetId)
	buf.PutInt(e.AddOffset)
	buf.PutInt(e.Limit)
	buf.PutInt(e.MaxId)
	buf.PutInt(e.MinId)
	return buf.Result()
}

func (с *Client) MessagesGetUnreadMentions(params *MessagesGetUnreadMentionsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetUnreadMentions")
	}

	resp, ok := data.(MessagesMessages)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesReadMentionsParams struct {
	Peer InputPeer `validate:"required"`
}

func (e *MessagesReadMentionsParams) CRC() uint32 {
	return uint32(0xf0189d3)
}

func (e *MessagesReadMentions) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

func (с *Client) MessagesReadMentions(params *MessagesReadMentionsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesReadMentions")
	}

	resp, ok := data.(*MessagesAffectedHistory)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetRecentLocationsParams struct {
	Peer  InputPeer `validate:"required"`
	Limit int32     `validate:"required"`
	Hash  int32     `validate:"required"`
}

func (e *MessagesGetRecentLocationsParams) CRC() uint32 {
	return uint32(0xbbc45b09)
}

func (e *MessagesGetRecentLocations) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.Limit)
	buf.PutInt(e.Hash)
	return buf.Result()
}

func (с *Client) MessagesGetRecentLocations(params *MessagesGetRecentLocationsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetRecentLocations")
	}

	resp, ok := data.(MessagesMessages)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesSendMultiMediaParams struct {
	__flagsPosition struct{}            // flags param position `validate:"required"`
	Silent          bool                `flag:"5,encoded_in_bitflags"`
	Background      bool                `flag:"6,encoded_in_bitflags"`
	ClearDraft      bool                `flag:"7,encoded_in_bitflags"`
	Peer            InputPeer           `validate:"required"`
	ReplyToMsgId    int32               `flag:"0"`
	MultiMedia      []*InputSingleMedia `validate:"required"`
	ScheduleDate    int32               `flag:"10"`
}

func (e *MessagesSendMultiMediaParams) CRC() uint32 {
	return uint32(0xcc0110cb)
}

func (e *MessagesSendMultiMedia) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.ReplyToMsgId) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Silent) {
		flag |= 1 << 5
	}
	if !zero.IsZeroVal(e.Background) {
		flag |= 1 << 6
	}
	if !zero.IsZeroVal(e.ClearDraft) {
		flag |= 1 << 7
	}
	if !zero.IsZeroVal(e.ScheduleDate) {
		flag |= 1 << 10
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Peer.Encode())
	if !zero.IsZeroVal(e.ReplyToMsgId) {
		buf.PutInt(e.ReplyToMsgId)
	}
	buf.PutVector(e.MultiMedia)
	if !zero.IsZeroVal(e.ScheduleDate) {
		buf.PutInt(e.ScheduleDate)
	}
	return buf.Result()
}

func (с *Client) MessagesSendMultiMedia(params *MessagesSendMultiMediaParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesSendMultiMedia")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesUploadEncryptedFileParams struct {
	Peer *InputEncryptedChat `validate:"required"`
	File InputEncryptedFile  `validate:"required"`
}

func (e *MessagesUploadEncryptedFileParams) CRC() uint32 {
	return uint32(0x5057c497)
}

func (e *MessagesUploadEncryptedFile) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutRawBytes(e.File.Encode())
	return buf.Result()
}

func (с *Client) MessagesUploadEncryptedFile(params *MessagesUploadEncryptedFileParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesUploadEncryptedFile")
	}

	resp, ok := data.(EncryptedFile)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesSearchStickerSetsParams struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	ExcludeFeatured bool     `flag:"0,encoded_in_bitflags"`
	Q               string   `validate:"required"`
	Hash            int32    `validate:"required"`
}

func (e *MessagesSearchStickerSetsParams) CRC() uint32 {
	return uint32(0xc2b7d08b)
}

func (e *MessagesSearchStickerSets) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.ExcludeFeatured) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutString(e.Q)
	buf.PutInt(e.Hash)
	return buf.Result()
}

func (с *Client) MessagesSearchStickerSets(params *MessagesSearchStickerSetsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesSearchStickerSets")
	}

	resp, ok := data.(MessagesFoundStickerSets)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetSplitRangesParams struct{}

func (e *MessagesGetSplitRangesParams) CRC() uint32 {
	return uint32(0x1cff7e08)
}

func (e *MessagesGetSplitRanges) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) MessagesGetSplitRanges() {
	data, err := c.MakeRequest(&MessagesGetSplitRangesParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetSplitRanges")
	}

	resp, ok := data.(*MessageRange)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesMarkDialogUnreadParams struct {
	__flagsPosition struct{}        // flags param position `validate:"required"`
	Unread          bool            `flag:"0,encoded_in_bitflags"`
	Peer            InputDialogPeer `validate:"required"`
}

func (e *MessagesMarkDialogUnreadParams) CRC() uint32 {
	return uint32(0xc286d98f)
}

func (e *MessagesMarkDialogUnread) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Unread) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

func (с *Client) MessagesMarkDialogUnread(params *MessagesMarkDialogUnreadParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesMarkDialogUnread")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetDialogUnreadMarksParams struct{}

func (e *MessagesGetDialogUnreadMarksParams) CRC() uint32 {
	return uint32(0x22e24e22)
}

func (e *MessagesGetDialogUnreadMarks) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) MessagesGetDialogUnreadMarks() {
	data, err := c.MakeRequest(&MessagesGetDialogUnreadMarksParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetDialogUnreadMarks")
	}

	resp, ok := data.(DialogPeer)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesClearAllDraftsParams struct{}

func (e *MessagesClearAllDraftsParams) CRC() uint32 {
	return uint32(0x7e58ee9c)
}

func (e *MessagesClearAllDrafts) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) MessagesClearAllDrafts() {
	data, err := c.MakeRequest(&MessagesClearAllDraftsParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesClearAllDrafts")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesUpdatePinnedMessageParams struct {
	__flagsPosition struct{}  // flags param position `validate:"required"`
	Silent          bool      `flag:"0,encoded_in_bitflags"`
	Peer            InputPeer `validate:"required"`
	Id              int32     `validate:"required"`
}

func (e *MessagesUpdatePinnedMessageParams) CRC() uint32 {
	return uint32(0xd2aaf7ec)
}

func (e *MessagesUpdatePinnedMessage) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Silent) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.Id)
	return buf.Result()
}

func (с *Client) MessagesUpdatePinnedMessage(params *MessagesUpdatePinnedMessageParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesUpdatePinnedMessage")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesSendVoteParams struct {
	Peer    InputPeer `validate:"required"`
	MsgId   int32     `validate:"required"`
	Options [][]byte  `validate:"required"`
}

func (e *MessagesSendVoteParams) CRC() uint32 {
	return uint32(0x10ea6184)
}

func (e *MessagesSendVote) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.MsgId)
	buf.PutVector(e.Options)
	return buf.Result()
}

func (с *Client) MessagesSendVote(params *MessagesSendVoteParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesSendVote")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetPollResultsParams struct {
	Peer  InputPeer `validate:"required"`
	MsgId int32     `validate:"required"`
}

func (e *MessagesGetPollResultsParams) CRC() uint32 {
	return uint32(0x73bb643b)
}

func (e *MessagesGetPollResults) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.MsgId)
	return buf.Result()
}

func (с *Client) MessagesGetPollResults(params *MessagesGetPollResultsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetPollResults")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetOnlinesParams struct {
	Peer InputPeer `validate:"required"`
}

func (e *MessagesGetOnlinesParams) CRC() uint32 {
	return uint32(0x6e2be050)
}

func (e *MessagesGetOnlines) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

func (с *Client) MessagesGetOnlines(params *MessagesGetOnlinesParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetOnlines")
	}

	resp, ok := data.(*ChatOnlines)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetStatsURLParams struct {
	__flagsPosition struct{}  // flags param position `validate:"required"`
	Dark            bool      `flag:"0,encoded_in_bitflags"`
	Peer            InputPeer `validate:"required"`
	Params          string    `validate:"required"`
}

func (e *MessagesGetStatsURLParams) CRC() uint32 {
	return uint32(0x812c2ae6)
}

func (e *MessagesGetStatsURL) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Dark) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutString(e.Params)
	return buf.Result()
}

func (с *Client) MessagesGetStatsURL(params *MessagesGetStatsURLParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetStatsURL")
	}

	resp, ok := data.(*StatsURL)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesEditChatAboutParams struct {
	Peer  InputPeer `validate:"required"`
	About string    `validate:"required"`
}

func (e *MessagesEditChatAboutParams) CRC() uint32 {
	return uint32(0xdef60797)
}

func (e *MessagesEditChatAbout) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutString(e.About)
	return buf.Result()
}

func (с *Client) MessagesEditChatAbout(params *MessagesEditChatAboutParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesEditChatAbout")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesEditChatDefaultBannedRightsParams struct {
	Peer         InputPeer         `validate:"required"`
	BannedRights *ChatBannedRights `validate:"required"`
}

func (e *MessagesEditChatDefaultBannedRightsParams) CRC() uint32 {
	return uint32(0xa5866b41)
}

func (e *MessagesEditChatDefaultBannedRights) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutRawBytes(e.BannedRights.Encode())
	return buf.Result()
}

func (с *Client) MessagesEditChatDefaultBannedRights(params *MessagesEditChatDefaultBannedRightsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesEditChatDefaultBannedRights")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetEmojiKeywordsParams struct {
	LangCode string `validate:"required"`
}

func (e *MessagesGetEmojiKeywordsParams) CRC() uint32 {
	return uint32(0x35a0e062)
}

func (e *MessagesGetEmojiKeywords) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.LangCode)
	return buf.Result()
}

func (с *Client) MessagesGetEmojiKeywords(params *MessagesGetEmojiKeywordsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetEmojiKeywords")
	}

	resp, ok := data.(*EmojiKeywordsDifference)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetEmojiKeywordsDifferenceParams struct {
	LangCode    string `validate:"required"`
	FromVersion int32  `validate:"required"`
}

func (e *MessagesGetEmojiKeywordsDifferenceParams) CRC() uint32 {
	return uint32(0x1508b6af)
}

func (e *MessagesGetEmojiKeywordsDifference) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.LangCode)
	buf.PutInt(e.FromVersion)
	return buf.Result()
}

func (с *Client) MessagesGetEmojiKeywordsDifference(params *MessagesGetEmojiKeywordsDifferenceParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetEmojiKeywordsDifference")
	}

	resp, ok := data.(*EmojiKeywordsDifference)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetEmojiKeywordsLanguagesParams struct {
	LangCodes []string `validate:"required"`
}

func (e *MessagesGetEmojiKeywordsLanguagesParams) CRC() uint32 {
	return uint32(0x4e9963b2)
}

func (e *MessagesGetEmojiKeywordsLanguages) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.LangCodes)
	return buf.Result()
}

func (с *Client) MessagesGetEmojiKeywordsLanguages(params *MessagesGetEmojiKeywordsLanguagesParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetEmojiKeywordsLanguages")
	}

	resp, ok := data.(*EmojiLanguage)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetEmojiURLParams struct {
	LangCode string `validate:"required"`
}

func (e *MessagesGetEmojiURLParams) CRC() uint32 {
	return uint32(0xd5b10c26)
}

func (e *MessagesGetEmojiURL) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.LangCode)
	return buf.Result()
}

func (с *Client) MessagesGetEmojiURL(params *MessagesGetEmojiURLParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetEmojiURL")
	}

	resp, ok := data.(*EmojiURL)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetSearchCountersParams struct {
	Peer    InputPeer        `validate:"required"`
	Filters []MessagesFilter `validate:"required"`
}

func (e *MessagesGetSearchCountersParams) CRC() uint32 {
	return uint32(0x732eef00)
}

func (e *MessagesGetSearchCounters) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutVector(e.Filters)
	return buf.Result()
}

func (с *Client) MessagesGetSearchCounters(params *MessagesGetSearchCountersParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetSearchCounters")
	}

	resp, ok := data.(*MessagesSearchCounter)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesRequestUrlAuthParams struct {
	Peer     InputPeer `validate:"required"`
	MsgId    int32     `validate:"required"`
	ButtonId int32     `validate:"required"`
}

func (e *MessagesRequestUrlAuthParams) CRC() uint32 {
	return uint32(0xe33f5613)
}

func (e *MessagesRequestUrlAuth) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.MsgId)
	buf.PutInt(e.ButtonId)
	return buf.Result()
}

func (с *Client) MessagesRequestUrlAuth(params *MessagesRequestUrlAuthParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesRequestUrlAuth")
	}

	resp, ok := data.(UrlAuthResult)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesAcceptUrlAuthParams struct {
	__flagsPosition struct{}  // flags param position `validate:"required"`
	WriteAllowed    bool      `flag:"0,encoded_in_bitflags"`
	Peer            InputPeer `validate:"required"`
	MsgId           int32     `validate:"required"`
	ButtonId        int32     `validate:"required"`
}

func (e *MessagesAcceptUrlAuthParams) CRC() uint32 {
	return uint32(0xf729ea98)
}

func (e *MessagesAcceptUrlAuth) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.WriteAllowed) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.MsgId)
	buf.PutInt(e.ButtonId)
	return buf.Result()
}

func (с *Client) MessagesAcceptUrlAuth(params *MessagesAcceptUrlAuthParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesAcceptUrlAuth")
	}

	resp, ok := data.(UrlAuthResult)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesHidePeerSettingsBarParams struct {
	Peer InputPeer `validate:"required"`
}

func (e *MessagesHidePeerSettingsBarParams) CRC() uint32 {
	return uint32(0x4facb138)
}

func (e *MessagesHidePeerSettingsBar) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

func (с *Client) MessagesHidePeerSettingsBar(params *MessagesHidePeerSettingsBarParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesHidePeerSettingsBar")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetScheduledHistoryParams struct {
	Peer InputPeer `validate:"required"`
	Hash int32     `validate:"required"`
}

func (e *MessagesGetScheduledHistoryParams) CRC() uint32 {
	return uint32(0xe2c2685b)
}

func (e *MessagesGetScheduledHistory) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.Hash)
	return buf.Result()
}

func (с *Client) MessagesGetScheduledHistory(params *MessagesGetScheduledHistoryParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetScheduledHistory")
	}

	resp, ok := data.(MessagesMessages)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetScheduledMessagesParams struct {
	Peer InputPeer `validate:"required"`
	Id   []int32   `validate:"required"`
}

func (e *MessagesGetScheduledMessagesParams) CRC() uint32 {
	return uint32(0xbdbb0464)
}

func (e *MessagesGetScheduledMessages) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutVector(e.Id)
	return buf.Result()
}

func (с *Client) MessagesGetScheduledMessages(params *MessagesGetScheduledMessagesParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetScheduledMessages")
	}

	resp, ok := data.(MessagesMessages)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesSendScheduledMessagesParams struct {
	Peer InputPeer `validate:"required"`
	Id   []int32   `validate:"required"`
}

func (e *MessagesSendScheduledMessagesParams) CRC() uint32 {
	return uint32(0xbd38850a)
}

func (e *MessagesSendScheduledMessages) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutVector(e.Id)
	return buf.Result()
}

func (с *Client) MessagesSendScheduledMessages(params *MessagesSendScheduledMessagesParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesSendScheduledMessages")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesDeleteScheduledMessagesParams struct {
	Peer InputPeer `validate:"required"`
	Id   []int32   `validate:"required"`
}

func (e *MessagesDeleteScheduledMessagesParams) CRC() uint32 {
	return uint32(0x59ae2b16)
}

func (e *MessagesDeleteScheduledMessages) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutVector(e.Id)
	return buf.Result()
}

func (с *Client) MessagesDeleteScheduledMessages(params *MessagesDeleteScheduledMessagesParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesDeleteScheduledMessages")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetPollVotesParams struct {
	__flagsPosition struct{}  // flags param position `validate:"required"`
	Peer            InputPeer `validate:"required"`
	Id              int32     `validate:"required"`
	Option          []byte    `flag:"0"`
	Offset          string    `flag:"1"`
	Limit           int32     `validate:"required"`
}

func (e *MessagesGetPollVotesParams) CRC() uint32 {
	return uint32(0xb86e380e)
}

func (e *MessagesGetPollVotes) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Option) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Offset) {
		flag |= 1 << 1
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.Id)
	if !zero.IsZeroVal(e.Option) {
		buf.PutMessage(e.Option)
	}
	if !zero.IsZeroVal(e.Offset) {
		buf.PutString(e.Offset)
	}
	buf.PutInt(e.Limit)
	return buf.Result()
}

func (с *Client) MessagesGetPollVotes(params *MessagesGetPollVotesParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetPollVotes")
	}

	resp, ok := data.(*MessagesVotesList)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesToggleStickerSetsParams struct {
	__flagsPosition struct{}          // flags param position `validate:"required"`
	Uninstall       bool              `flag:"0,encoded_in_bitflags"`
	Archive         bool              `flag:"1,encoded_in_bitflags"`
	Unarchive       bool              `flag:"2,encoded_in_bitflags"`
	Stickersets     []InputStickerSet `validate:"required"`
}

func (e *MessagesToggleStickerSetsParams) CRC() uint32 {
	return uint32(0xb5052fea)
}

func (e *MessagesToggleStickerSets) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Uninstall) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Archive) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Unarchive) {
		flag |= 1 << 2
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutVector(e.Stickersets)
	return buf.Result()
}

func (с *Client) MessagesToggleStickerSets(params *MessagesToggleStickerSetsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesToggleStickerSets")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetDialogFiltersParams struct{}

func (e *MessagesGetDialogFiltersParams) CRC() uint32 {
	return uint32(0xf19ed96d)
}

func (e *MessagesGetDialogFilters) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) MessagesGetDialogFilters() {
	data, err := c.MakeRequest(&MessagesGetDialogFiltersParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetDialogFilters")
	}

	resp, ok := data.(*DialogFilter)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetSuggestedDialogFiltersParams struct{}

func (e *MessagesGetSuggestedDialogFiltersParams) CRC() uint32 {
	return uint32(0xa29cd42c)
}

func (e *MessagesGetSuggestedDialogFilters) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) MessagesGetSuggestedDialogFilters() {
	data, err := c.MakeRequest(&MessagesGetSuggestedDialogFiltersParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetSuggestedDialogFilters")
	}

	resp, ok := data.(*DialogFilterSuggested)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesUpdateDialogFilterParams struct {
	__flagsPosition struct{}      // flags param position `validate:"required"`
	Id              int32         `validate:"required"`
	Filter          *DialogFilter `flag:"0"`
}

func (e *MessagesUpdateDialogFilterParams) CRC() uint32 {
	return uint32(0x1ad4a04a)
}

func (e *MessagesUpdateDialogFilter) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Filter) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutInt(e.Id)
	if !zero.IsZeroVal(e.Filter) {
		buf.PutRawBytes(e.Filter.Encode())
	}
	return buf.Result()
}

func (с *Client) MessagesUpdateDialogFilter(params *MessagesUpdateDialogFilterParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesUpdateDialogFilter")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesUpdateDialogFiltersOrderParams struct {
	Order []int32 `validate:"required"`
}

func (e *MessagesUpdateDialogFiltersOrderParams) CRC() uint32 {
	return uint32(0xc563c1e4)
}

func (e *MessagesUpdateDialogFiltersOrder) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Order)
	return buf.Result()
}

func (с *Client) MessagesUpdateDialogFiltersOrder(params *MessagesUpdateDialogFiltersOrderParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesUpdateDialogFiltersOrder")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type MessagesGetOldFeaturedStickersParams struct {
	Offset int32 `validate:"required"`
	Limit  int32 `validate:"required"`
	Hash   int32 `validate:"required"`
}

func (e *MessagesGetOldFeaturedStickersParams) CRC() uint32 {
	return uint32(0x5fe7025b)
}

func (e *MessagesGetOldFeaturedStickers) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Offset)
	buf.PutInt(e.Limit)
	buf.PutInt(e.Hash)
	return buf.Result()
}

func (с *Client) MessagesGetOldFeaturedStickers(params *MessagesGetOldFeaturedStickersParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning MessagesGetOldFeaturedStickers")
	}

	resp, ok := data.(MessagesFeaturedStickers)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type UpdatesGetStateParams struct{}

func (e *UpdatesGetStateParams) CRC() uint32 {
	return uint32(0xedd4882a)
}

func (e *UpdatesGetState) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) UpdatesGetState() {
	data, err := c.MakeRequest(&UpdatesGetStateParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning UpdatesGetState")
	}

	resp, ok := data.(*UpdatesState)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type UpdatesGetDifferenceParams struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	Pts             int32    `validate:"required"`
	PtsTotalLimit   int32    `flag:"0"`
	Date            int32    `validate:"required"`
	Qts             int32    `validate:"required"`
}

func (e *UpdatesGetDifferenceParams) CRC() uint32 {
	return uint32(0x25939651)
}

func (e *UpdatesGetDifference) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.PtsTotalLimit) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutInt(e.Pts)
	if !zero.IsZeroVal(e.PtsTotalLimit) {
		buf.PutInt(e.PtsTotalLimit)
	}
	buf.PutInt(e.Date)
	buf.PutInt(e.Qts)
	return buf.Result()
}

func (с *Client) UpdatesGetDifference(params *UpdatesGetDifferenceParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning UpdatesGetDifference")
	}

	resp, ok := data.(UpdatesDifference)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type UpdatesGetChannelDifferenceParams struct {
	__flagsPosition struct{}              // flags param position `validate:"required"`
	Force           bool                  `flag:"0,encoded_in_bitflags"`
	Channel         InputChannel          `validate:"required"`
	Filter          ChannelMessagesFilter `validate:"required"`
	Pts             int32                 `validate:"required"`
	Limit           int32                 `validate:"required"`
}

func (e *UpdatesGetChannelDifferenceParams) CRC() uint32 {
	return uint32(0x3173d78)
}

func (e *UpdatesGetChannelDifference) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Force) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Channel.Encode())
	buf.PutRawBytes(e.Filter.Encode())
	buf.PutInt(e.Pts)
	buf.PutInt(e.Limit)
	return buf.Result()
}

func (с *Client) UpdatesGetChannelDifference(params *UpdatesGetChannelDifferenceParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning UpdatesGetChannelDifference")
	}

	resp, ok := data.(UpdatesChannelDifference)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type PhotosUpdateProfilePhotoParams struct {
	Id InputPhoto `validate:"required"`
}

func (e *PhotosUpdateProfilePhotoParams) CRC() uint32 {
	return uint32(0x72d4742c)
}

func (e *PhotosUpdateProfilePhoto) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Id.Encode())
	return buf.Result()
}

func (с *Client) PhotosUpdateProfilePhoto(params *PhotosUpdateProfilePhotoParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning PhotosUpdateProfilePhoto")
	}

	resp, ok := data.(*PhotosPhoto)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type PhotosUploadProfilePhotoParams struct {
	__flagsPosition struct{}  // flags param position `validate:"required"`
	File            InputFile `flag:"0"`
	Video           InputFile `flag:"1"`
	VideoStartTs    float64   `flag:"2"`
}

func (e *PhotosUploadProfilePhotoParams) CRC() uint32 {
	return uint32(0x89f30f69)
}

func (e *PhotosUploadProfilePhoto) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.File) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Video) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.VideoStartTs) {
		flag |= 1 << 2
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.File) {
		buf.PutRawBytes(e.File.Encode())
	}
	if !zero.IsZeroVal(e.Video) {
		buf.PutRawBytes(e.Video.Encode())
	}
	if !zero.IsZeroVal(e.VideoStartTs) {
		buf.PutDouble(e.VideoStartTs)
	}
	return buf.Result()
}

func (с *Client) PhotosUploadProfilePhoto(params *PhotosUploadProfilePhotoParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning PhotosUploadProfilePhoto")
	}

	resp, ok := data.(*PhotosPhoto)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type PhotosDeletePhotosParams struct {
	Id []InputPhoto `validate:"required"`
}

func (e *PhotosDeletePhotosParams) CRC() uint32 {
	return uint32(0x87cf7f2f)
}

func (e *PhotosDeletePhotos) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Id)
	return buf.Result()
}

func (с *Client) PhotosDeletePhotos(params *PhotosDeletePhotosParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning PhotosDeletePhotos")
	}

	resp, ok := data.(Long)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type PhotosGetUserPhotosParams struct {
	UserId InputUser `validate:"required"`
	Offset int32     `validate:"required"`
	MaxId  int64     `validate:"required"`
	Limit  int32     `validate:"required"`
}

func (e *PhotosGetUserPhotosParams) CRC() uint32 {
	return uint32(0x91cd32a8)
}

func (e *PhotosGetUserPhotos) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.UserId.Encode())
	buf.PutInt(e.Offset)
	buf.PutLong(e.MaxId)
	buf.PutInt(e.Limit)
	return buf.Result()
}

func (с *Client) PhotosGetUserPhotos(params *PhotosGetUserPhotosParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning PhotosGetUserPhotos")
	}

	resp, ok := data.(PhotosPhotos)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type UploadSaveFilePartParams struct {
	FileId   int64  `validate:"required"`
	FilePart int32  `validate:"required"`
	Bytes    []byte `validate:"required"`
}

func (e *UploadSaveFilePartParams) CRC() uint32 {
	return uint32(0xb304a621)
}

func (e *UploadSaveFilePart) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.FileId)
	buf.PutInt(e.FilePart)
	buf.PutMessage(e.Bytes)
	return buf.Result()
}

func (с *Client) UploadSaveFilePart(params *UploadSaveFilePartParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning UploadSaveFilePart")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type UploadGetFileParams struct {
	__flagsPosition struct{}          // flags param position `validate:"required"`
	Precise         bool              `flag:"0,encoded_in_bitflags"`
	CdnSupported    bool              `flag:"1,encoded_in_bitflags"`
	Location        InputFileLocation `validate:"required"`
	Offset          int32             `validate:"required"`
	Limit           int32             `validate:"required"`
}

func (e *UploadGetFileParams) CRC() uint32 {
	return uint32(0xb15a9afc)
}

func (e *UploadGetFile) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Precise) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.CdnSupported) {
		flag |= 1 << 1
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Location.Encode())
	buf.PutInt(e.Offset)
	buf.PutInt(e.Limit)
	return buf.Result()
}

func (с *Client) UploadGetFile(params *UploadGetFileParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning UploadGetFile")
	}

	resp, ok := data.(UploadFile)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type UploadSaveBigFilePartParams struct {
	FileId         int64  `validate:"required"`
	FilePart       int32  `validate:"required"`
	FileTotalParts int32  `validate:"required"`
	Bytes          []byte `validate:"required"`
}

func (e *UploadSaveBigFilePartParams) CRC() uint32 {
	return uint32(0xde7b673d)
}

func (e *UploadSaveBigFilePart) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.FileId)
	buf.PutInt(e.FilePart)
	buf.PutInt(e.FileTotalParts)
	buf.PutMessage(e.Bytes)
	return buf.Result()
}

func (с *Client) UploadSaveBigFilePart(params *UploadSaveBigFilePartParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning UploadSaveBigFilePart")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type UploadGetWebFileParams struct {
	Location InputWebFileLocation `validate:"required"`
	Offset   int32                `validate:"required"`
	Limit    int32                `validate:"required"`
}

func (e *UploadGetWebFileParams) CRC() uint32 {
	return uint32(0x24e6818d)
}

func (e *UploadGetWebFile) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Location.Encode())
	buf.PutInt(e.Offset)
	buf.PutInt(e.Limit)
	return buf.Result()
}

func (с *Client) UploadGetWebFile(params *UploadGetWebFileParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning UploadGetWebFile")
	}

	resp, ok := data.(*UploadWebFile)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type UploadGetCdnFileParams struct {
	FileToken []byte `validate:"required"`
	Offset    int32  `validate:"required"`
	Limit     int32  `validate:"required"`
}

func (e *UploadGetCdnFileParams) CRC() uint32 {
	return uint32(0x2000bcc3)
}

func (e *UploadGetCdnFile) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.FileToken)
	buf.PutInt(e.Offset)
	buf.PutInt(e.Limit)
	return buf.Result()
}

func (с *Client) UploadGetCdnFile(params *UploadGetCdnFileParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning UploadGetCdnFile")
	}

	resp, ok := data.(UploadCdnFile)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type UploadReuploadCdnFileParams struct {
	FileToken    []byte `validate:"required"`
	RequestToken []byte `validate:"required"`
}

func (e *UploadReuploadCdnFileParams) CRC() uint32 {
	return uint32(0x9b2754a8)
}

func (e *UploadReuploadCdnFile) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.FileToken)
	buf.PutMessage(e.RequestToken)
	return buf.Result()
}

func (с *Client) UploadReuploadCdnFile(params *UploadReuploadCdnFileParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning UploadReuploadCdnFile")
	}

	resp, ok := data.(*FileHash)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type UploadGetCdnFileHashesParams struct {
	FileToken []byte `validate:"required"`
	Offset    int32  `validate:"required"`
}

func (e *UploadGetCdnFileHashesParams) CRC() uint32 {
	return uint32(0x4da54231)
}

func (e *UploadGetCdnFileHashes) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.FileToken)
	buf.PutInt(e.Offset)
	return buf.Result()
}

func (с *Client) UploadGetCdnFileHashes(params *UploadGetCdnFileHashesParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning UploadGetCdnFileHashes")
	}

	resp, ok := data.(*FileHash)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type UploadGetFileHashesParams struct {
	Location InputFileLocation `validate:"required"`
	Offset   int32             `validate:"required"`
}

func (e *UploadGetFileHashesParams) CRC() uint32 {
	return uint32(0xc7025931)
}

func (e *UploadGetFileHashes) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Location.Encode())
	buf.PutInt(e.Offset)
	return buf.Result()
}

func (с *Client) UploadGetFileHashes(params *UploadGetFileHashesParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning UploadGetFileHashes")
	}

	resp, ok := data.(*FileHash)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type HelpGetConfigParams struct{}

func (e *HelpGetConfigParams) CRC() uint32 {
	return uint32(0xc4f9186b)
}

func (e *HelpGetConfig) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) HelpGetConfig() {
	data, err := c.MakeRequest(&HelpGetConfigParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning HelpGetConfig")
	}

	resp, ok := data.(*Config)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type HelpGetNearestDcParams struct{}

func (e *HelpGetNearestDcParams) CRC() uint32 {
	return uint32(0x1fb33026)
}

func (e *HelpGetNearestDc) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) HelpGetNearestDc() {
	data, err := c.MakeRequest(&HelpGetNearestDcParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning HelpGetNearestDc")
	}

	resp, ok := data.(*NearestDc)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type HelpGetAppUpdateParams struct {
	Source string `validate:"required"`
}

func (e *HelpGetAppUpdateParams) CRC() uint32 {
	return uint32(0x522d5a7d)
}

func (e *HelpGetAppUpdate) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Source)
	return buf.Result()
}

func (с *Client) HelpGetAppUpdate(params *HelpGetAppUpdateParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning HelpGetAppUpdate")
	}

	resp, ok := data.(HelpAppUpdate)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type HelpGetInviteTextParams struct{}

func (e *HelpGetInviteTextParams) CRC() uint32 {
	return uint32(0x4d392343)
}

func (e *HelpGetInviteText) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) HelpGetInviteText() {
	data, err := c.MakeRequest(&HelpGetInviteTextParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning HelpGetInviteText")
	}

	resp, ok := data.(*HelpInviteText)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type HelpGetSupportParams struct{}

func (e *HelpGetSupportParams) CRC() uint32 {
	return uint32(0x9cdf08cd)
}

func (e *HelpGetSupport) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) HelpGetSupport() {
	data, err := c.MakeRequest(&HelpGetSupportParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning HelpGetSupport")
	}

	resp, ok := data.(*HelpSupport)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type HelpGetAppChangelogParams struct {
	PrevAppVersion string `validate:"required"`
}

func (e *HelpGetAppChangelogParams) CRC() uint32 {
	return uint32(0x9010ef6f)
}

func (e *HelpGetAppChangelog) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.PrevAppVersion)
	return buf.Result()
}

func (с *Client) HelpGetAppChangelog(params *HelpGetAppChangelogParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning HelpGetAppChangelog")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type HelpSetBotUpdatesStatusParams struct {
	PendingUpdatesCount int32  `validate:"required"`
	Message             string `validate:"required"`
}

func (e *HelpSetBotUpdatesStatusParams) CRC() uint32 {
	return uint32(0xec22cfcd)
}

func (e *HelpSetBotUpdatesStatus) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.PendingUpdatesCount)
	buf.PutString(e.Message)
	return buf.Result()
}

func (с *Client) HelpSetBotUpdatesStatus(params *HelpSetBotUpdatesStatusParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning HelpSetBotUpdatesStatus")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type HelpGetCdnConfigParams struct{}

func (e *HelpGetCdnConfigParams) CRC() uint32 {
	return uint32(0x52029342)
}

func (e *HelpGetCdnConfig) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) HelpGetCdnConfig() {
	data, err := c.MakeRequest(&HelpGetCdnConfigParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning HelpGetCdnConfig")
	}

	resp, ok := data.(*CdnConfig)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type HelpGetRecentMeUrlsParams struct {
	Referer string `validate:"required"`
}

func (e *HelpGetRecentMeUrlsParams) CRC() uint32 {
	return uint32(0x3dc0f114)
}

func (e *HelpGetRecentMeUrls) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Referer)
	return buf.Result()
}

func (с *Client) HelpGetRecentMeUrls(params *HelpGetRecentMeUrlsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning HelpGetRecentMeUrls")
	}

	resp, ok := data.(*HelpRecentMeUrls)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type HelpGetTermsOfServiceUpdateParams struct{}

func (e *HelpGetTermsOfServiceUpdateParams) CRC() uint32 {
	return uint32(0x2ca51fd1)
}

func (e *HelpGetTermsOfServiceUpdate) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) HelpGetTermsOfServiceUpdate() {
	data, err := c.MakeRequest(&HelpGetTermsOfServiceUpdateParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning HelpGetTermsOfServiceUpdate")
	}

	resp, ok := data.(HelpTermsOfServiceUpdate)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type HelpAcceptTermsOfServiceParams struct {
	Id *DataJSON `validate:"required"`
}

func (e *HelpAcceptTermsOfServiceParams) CRC() uint32 {
	return uint32(0xee72f79a)
}

func (e *HelpAcceptTermsOfService) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Id.Encode())
	return buf.Result()
}

func (с *Client) HelpAcceptTermsOfService(params *HelpAcceptTermsOfServiceParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning HelpAcceptTermsOfService")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type HelpGetDeepLinkInfoParams struct {
	Path string `validate:"required"`
}

func (e *HelpGetDeepLinkInfoParams) CRC() uint32 {
	return uint32(0x3fedc75f)
}

func (e *HelpGetDeepLinkInfo) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Path)
	return buf.Result()
}

func (с *Client) HelpGetDeepLinkInfo(params *HelpGetDeepLinkInfoParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning HelpGetDeepLinkInfo")
	}

	resp, ok := data.(HelpDeepLinkInfo)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type HelpGetAppConfigParams struct{}

func (e *HelpGetAppConfigParams) CRC() uint32 {
	return uint32(0x98914110)
}

func (e *HelpGetAppConfig) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) HelpGetAppConfig() {
	data, err := c.MakeRequest(&HelpGetAppConfigParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning HelpGetAppConfig")
	}

	resp, ok := data.(JSONValue)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type HelpSaveAppLogParams struct {
	Events []*InputAppEvent `validate:"required"`
}

func (e *HelpSaveAppLogParams) CRC() uint32 {
	return uint32(0x6f02f748)
}

func (e *HelpSaveAppLog) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Events)
	return buf.Result()
}

func (с *Client) HelpSaveAppLog(params *HelpSaveAppLogParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning HelpSaveAppLog")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type HelpGetPassportConfigParams struct {
	Hash int32 `validate:"required"`
}

func (e *HelpGetPassportConfigParams) CRC() uint32 {
	return uint32(0xc661ad08)
}

func (e *HelpGetPassportConfig) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Hash)
	return buf.Result()
}

func (с *Client) HelpGetPassportConfig(params *HelpGetPassportConfigParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning HelpGetPassportConfig")
	}

	resp, ok := data.(HelpPassportConfig)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type HelpGetSupportNameParams struct{}

func (e *HelpGetSupportNameParams) CRC() uint32 {
	return uint32(0xd360e72c)
}

func (e *HelpGetSupportName) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) HelpGetSupportName() {
	data, err := c.MakeRequest(&HelpGetSupportNameParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning HelpGetSupportName")
	}

	resp, ok := data.(*HelpSupportName)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type HelpGetUserInfoParams struct {
	UserId InputUser `validate:"required"`
}

func (e *HelpGetUserInfoParams) CRC() uint32 {
	return uint32(0x38a08d3)
}

func (e *HelpGetUserInfo) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.UserId.Encode())
	return buf.Result()
}

func (с *Client) HelpGetUserInfo(params *HelpGetUserInfoParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning HelpGetUserInfo")
	}

	resp, ok := data.(HelpUserInfo)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type HelpEditUserInfoParams struct {
	UserId   InputUser       `validate:"required"`
	Message  string          `validate:"required"`
	Entities []MessageEntity `validate:"required"`
}

func (e *HelpEditUserInfoParams) CRC() uint32 {
	return uint32(0x66b91b70)
}

func (e *HelpEditUserInfo) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.UserId.Encode())
	buf.PutString(e.Message)
	buf.PutVector(e.Entities)
	return buf.Result()
}

func (с *Client) HelpEditUserInfo(params *HelpEditUserInfoParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning HelpEditUserInfo")
	}

	resp, ok := data.(HelpUserInfo)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type HelpGetPromoDataParams struct{}

func (e *HelpGetPromoDataParams) CRC() uint32 {
	return uint32(0xc0977421)
}

func (e *HelpGetPromoData) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) HelpGetPromoData() {
	data, err := c.MakeRequest(&HelpGetPromoDataParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning HelpGetPromoData")
	}

	resp, ok := data.(HelpPromoData)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type HelpHidePromoDataParams struct {
	Peer InputPeer `validate:"required"`
}

func (e *HelpHidePromoDataParams) CRC() uint32 {
	return uint32(0x1e251c95)
}

func (e *HelpHidePromoData) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

func (с *Client) HelpHidePromoData(params *HelpHidePromoDataParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning HelpHidePromoData")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type HelpDismissSuggestionParams struct {
	Suggestion string `validate:"required"`
}

func (e *HelpDismissSuggestionParams) CRC() uint32 {
	return uint32(0x77fa99f)
}

func (e *HelpDismissSuggestion) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Suggestion)
	return buf.Result()
}

func (с *Client) HelpDismissSuggestion(params *HelpDismissSuggestionParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning HelpDismissSuggestion")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsReadHistoryParams struct {
	Channel InputChannel `validate:"required"`
	MaxId   int32        `validate:"required"`
}

func (e *ChannelsReadHistoryParams) CRC() uint32 {
	return uint32(0xcc104937)
}

func (e *ChannelsReadHistory) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Channel.Encode())
	buf.PutInt(e.MaxId)
	return buf.Result()
}

func (с *Client) ChannelsReadHistory(params *ChannelsReadHistoryParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsReadHistory")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsDeleteMessagesParams struct {
	Channel InputChannel `validate:"required"`
	Id      []int32      `validate:"required"`
}

func (e *ChannelsDeleteMessagesParams) CRC() uint32 {
	return uint32(0x84c1fd4e)
}

func (e *ChannelsDeleteMessages) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Channel.Encode())
	buf.PutVector(e.Id)
	return buf.Result()
}

func (с *Client) ChannelsDeleteMessages(params *ChannelsDeleteMessagesParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsDeleteMessages")
	}

	resp, ok := data.(*MessagesAffectedMessages)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsDeleteUserHistoryParams struct {
	Channel InputChannel `validate:"required"`
	UserId  InputUser    `validate:"required"`
}

func (e *ChannelsDeleteUserHistoryParams) CRC() uint32 {
	return uint32(0xd10dd71b)
}

func (e *ChannelsDeleteUserHistory) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Channel.Encode())
	buf.PutRawBytes(e.UserId.Encode())
	return buf.Result()
}

func (с *Client) ChannelsDeleteUserHistory(params *ChannelsDeleteUserHistoryParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsDeleteUserHistory")
	}

	resp, ok := data.(*MessagesAffectedHistory)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsReportSpamParams struct {
	Channel InputChannel `validate:"required"`
	UserId  InputUser    `validate:"required"`
	Id      []int32      `validate:"required"`
}

func (e *ChannelsReportSpamParams) CRC() uint32 {
	return uint32(0xfe087810)
}

func (e *ChannelsReportSpam) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Channel.Encode())
	buf.PutRawBytes(e.UserId.Encode())
	buf.PutVector(e.Id)
	return buf.Result()
}

func (с *Client) ChannelsReportSpam(params *ChannelsReportSpamParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsReportSpam")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsGetMessagesParams struct {
	Channel InputChannel   `validate:"required"`
	Id      []InputMessage `validate:"required"`
}

func (e *ChannelsGetMessagesParams) CRC() uint32 {
	return uint32(0xad8c9a23)
}

func (e *ChannelsGetMessages) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Channel.Encode())
	buf.PutVector(e.Id)
	return buf.Result()
}

func (с *Client) ChannelsGetMessages(params *ChannelsGetMessagesParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsGetMessages")
	}

	resp, ok := data.(MessagesMessages)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsGetParticipantsParams struct {
	Channel InputChannel              `validate:"required"`
	Filter  ChannelParticipantsFilter `validate:"required"`
	Offset  int32                     `validate:"required"`
	Limit   int32                     `validate:"required"`
	Hash    int32                     `validate:"required"`
}

func (e *ChannelsGetParticipantsParams) CRC() uint32 {
	return uint32(0x123e05e9)
}

func (e *ChannelsGetParticipants) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Channel.Encode())
	buf.PutRawBytes(e.Filter.Encode())
	buf.PutInt(e.Offset)
	buf.PutInt(e.Limit)
	buf.PutInt(e.Hash)
	return buf.Result()
}

func (с *Client) ChannelsGetParticipants(params *ChannelsGetParticipantsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsGetParticipants")
	}

	resp, ok := data.(ChannelsChannelParticipants)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsGetParticipantParams struct {
	Channel InputChannel `validate:"required"`
	UserId  InputUser    `validate:"required"`
}

func (e *ChannelsGetParticipantParams) CRC() uint32 {
	return uint32(0x546dd7a6)
}

func (e *ChannelsGetParticipant) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Channel.Encode())
	buf.PutRawBytes(e.UserId.Encode())
	return buf.Result()
}

func (с *Client) ChannelsGetParticipant(params *ChannelsGetParticipantParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsGetParticipant")
	}

	resp, ok := data.(*ChannelsChannelParticipant)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsGetChannelsParams struct {
	Id []InputChannel `validate:"required"`
}

func (e *ChannelsGetChannelsParams) CRC() uint32 {
	return uint32(0xa7f6bbb)
}

func (e *ChannelsGetChannels) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Id)
	return buf.Result()
}

func (с *Client) ChannelsGetChannels(params *ChannelsGetChannelsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsGetChannels")
	}

	resp, ok := data.(MessagesChats)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsGetFullChannelParams struct {
	Channel InputChannel `validate:"required"`
}

func (e *ChannelsGetFullChannelParams) CRC() uint32 {
	return uint32(0x8736a09)
}

func (e *ChannelsGetFullChannel) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Channel.Encode())
	return buf.Result()
}

func (с *Client) ChannelsGetFullChannel(params *ChannelsGetFullChannelParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsGetFullChannel")
	}

	resp, ok := data.(*MessagesChatFull)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsCreateChannelParams struct {
	__flagsPosition struct{}      // flags param position `validate:"required"`
	Broadcast       bool          `flag:"0,encoded_in_bitflags"`
	Megagroup       bool          `flag:"1,encoded_in_bitflags"`
	Title           string        `validate:"required"`
	About           string        `validate:"required"`
	GeoPoint        InputGeoPoint `flag:"2"`
	Address         string        `flag:"2"`
}

func (e *ChannelsCreateChannelParams) CRC() uint32 {
	return uint32(0x3d5fb10f)
}

func (e *ChannelsCreateChannel) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Broadcast) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Megagroup) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.GeoPoint) || !zero.IsZeroVal(e.Address) {
		flag |= 1 << 2
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutString(e.Title)
	buf.PutString(e.About)
	if !zero.IsZeroVal(e.GeoPoint) {
		buf.PutRawBytes(e.GeoPoint.Encode())
	}
	if !zero.IsZeroVal(e.Address) {
		buf.PutString(e.Address)
	}
	return buf.Result()
}

func (с *Client) ChannelsCreateChannel(params *ChannelsCreateChannelParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsCreateChannel")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsEditAdminParams struct {
	Channel     InputChannel     `validate:"required"`
	UserId      InputUser        `validate:"required"`
	AdminRights *ChatAdminRights `validate:"required"`
	Rank        string           `validate:"required"`
}

func (e *ChannelsEditAdminParams) CRC() uint32 {
	return uint32(0xd33c8902)
}

func (e *ChannelsEditAdmin) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Channel.Encode())
	buf.PutRawBytes(e.UserId.Encode())
	buf.PutRawBytes(e.AdminRights.Encode())
	buf.PutString(e.Rank)
	return buf.Result()
}

func (с *Client) ChannelsEditAdmin(params *ChannelsEditAdminParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsEditAdmin")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsEditTitleParams struct {
	Channel InputChannel `validate:"required"`
	Title   string       `validate:"required"`
}

func (e *ChannelsEditTitleParams) CRC() uint32 {
	return uint32(0x566decd0)
}

func (e *ChannelsEditTitle) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Channel.Encode())
	buf.PutString(e.Title)
	return buf.Result()
}

func (с *Client) ChannelsEditTitle(params *ChannelsEditTitleParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsEditTitle")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsEditPhotoParams struct {
	Channel InputChannel   `validate:"required"`
	Photo   InputChatPhoto `validate:"required"`
}

func (e *ChannelsEditPhotoParams) CRC() uint32 {
	return uint32(0xf12e57c9)
}

func (e *ChannelsEditPhoto) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Channel.Encode())
	buf.PutRawBytes(e.Photo.Encode())
	return buf.Result()
}

func (с *Client) ChannelsEditPhoto(params *ChannelsEditPhotoParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsEditPhoto")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsCheckUsernameParams struct {
	Channel  InputChannel `validate:"required"`
	Username string       `validate:"required"`
}

func (e *ChannelsCheckUsernameParams) CRC() uint32 {
	return uint32(0x10e6bd2c)
}

func (e *ChannelsCheckUsername) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Channel.Encode())
	buf.PutString(e.Username)
	return buf.Result()
}

func (с *Client) ChannelsCheckUsername(params *ChannelsCheckUsernameParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsCheckUsername")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsUpdateUsernameParams struct {
	Channel  InputChannel `validate:"required"`
	Username string       `validate:"required"`
}

func (e *ChannelsUpdateUsernameParams) CRC() uint32 {
	return uint32(0x3514b3de)
}

func (e *ChannelsUpdateUsername) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Channel.Encode())
	buf.PutString(e.Username)
	return buf.Result()
}

func (с *Client) ChannelsUpdateUsername(params *ChannelsUpdateUsernameParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsUpdateUsername")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsJoinChannelParams struct {
	Channel InputChannel `validate:"required"`
}

func (e *ChannelsJoinChannelParams) CRC() uint32 {
	return uint32(0x24b524c5)
}

func (e *ChannelsJoinChannel) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Channel.Encode())
	return buf.Result()
}

func (с *Client) ChannelsJoinChannel(params *ChannelsJoinChannelParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsJoinChannel")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsLeaveChannelParams struct {
	Channel InputChannel `validate:"required"`
}

func (e *ChannelsLeaveChannelParams) CRC() uint32 {
	return uint32(0xf836aa95)
}

func (e *ChannelsLeaveChannel) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Channel.Encode())
	return buf.Result()
}

func (с *Client) ChannelsLeaveChannel(params *ChannelsLeaveChannelParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsLeaveChannel")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsInviteToChannelParams struct {
	Channel InputChannel `validate:"required"`
	Users   []InputUser  `validate:"required"`
}

func (e *ChannelsInviteToChannelParams) CRC() uint32 {
	return uint32(0x199f3a6c)
}

func (e *ChannelsInviteToChannel) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Channel.Encode())
	buf.PutVector(e.Users)
	return buf.Result()
}

func (с *Client) ChannelsInviteToChannel(params *ChannelsInviteToChannelParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsInviteToChannel")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsDeleteChannelParams struct {
	Channel InputChannel `validate:"required"`
}

func (e *ChannelsDeleteChannelParams) CRC() uint32 {
	return uint32(0xc0111fe3)
}

func (e *ChannelsDeleteChannel) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Channel.Encode())
	return buf.Result()
}

func (с *Client) ChannelsDeleteChannel(params *ChannelsDeleteChannelParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsDeleteChannel")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsExportMessageLinkParams struct {
	Channel InputChannel `validate:"required"`
	Id      int32        `validate:"required"`
	Grouped bool         `validate:"required"`
}

func (e *ChannelsExportMessageLinkParams) CRC() uint32 {
	return uint32(0xceb77163)
}

func (e *ChannelsExportMessageLink) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Channel.Encode())
	buf.PutInt(e.Id)
	buf.PutBool(e.Grouped)
	return buf.Result()
}

func (с *Client) ChannelsExportMessageLink(params *ChannelsExportMessageLinkParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsExportMessageLink")
	}

	resp, ok := data.(*ExportedMessageLink)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsToggleSignaturesParams struct {
	Channel InputChannel `validate:"required"`
	Enabled bool         `validate:"required"`
}

func (e *ChannelsToggleSignaturesParams) CRC() uint32 {
	return uint32(0x1f69b606)
}

func (e *ChannelsToggleSignatures) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Channel.Encode())
	buf.PutBool(e.Enabled)
	return buf.Result()
}

func (с *Client) ChannelsToggleSignatures(params *ChannelsToggleSignaturesParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsToggleSignatures")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsGetAdminedPublicChannelsParams struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	ByLocation      bool     `flag:"0,encoded_in_bitflags"`
	CheckLimit      bool     `flag:"1,encoded_in_bitflags"`
}

func (e *ChannelsGetAdminedPublicChannelsParams) CRC() uint32 {
	return uint32(0xf8b036af)
}

func (e *ChannelsGetAdminedPublicChannels) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.ByLocation) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.CheckLimit) {
		flag |= 1 << 1
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	return buf.Result()
}

func (с *Client) ChannelsGetAdminedPublicChannels(params *ChannelsGetAdminedPublicChannelsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsGetAdminedPublicChannels")
	}

	resp, ok := data.(MessagesChats)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsEditBannedParams struct {
	Channel      InputChannel      `validate:"required"`
	UserId       InputUser         `validate:"required"`
	BannedRights *ChatBannedRights `validate:"required"`
}

func (e *ChannelsEditBannedParams) CRC() uint32 {
	return uint32(0x72796912)
}

func (e *ChannelsEditBanned) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Channel.Encode())
	buf.PutRawBytes(e.UserId.Encode())
	buf.PutRawBytes(e.BannedRights.Encode())
	return buf.Result()
}

func (с *Client) ChannelsEditBanned(params *ChannelsEditBannedParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsEditBanned")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsGetAdminLogParams struct {
	__flagsPosition struct{}                     // flags param position `validate:"required"`
	Channel         InputChannel                 `validate:"required"`
	Q               string                       `validate:"required"`
	EventsFilter    *ChannelAdminLogEventsFilter `flag:"0"`
	Admins          []InputUser                  `flag:"1"`
	MaxId           int64                        `validate:"required"`
	MinId           int64                        `validate:"required"`
	Limit           int32                        `validate:"required"`
}

func (e *ChannelsGetAdminLogParams) CRC() uint32 {
	return uint32(0x33ddf480)
}

func (e *ChannelsGetAdminLog) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.EventsFilter) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Admins) {
		flag |= 1 << 1
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Channel.Encode())
	buf.PutString(e.Q)
	if !zero.IsZeroVal(e.EventsFilter) {
		buf.PutRawBytes(e.EventsFilter.Encode())
	}
	if !zero.IsZeroVal(e.Admins) {
		buf.PutVector(e.Admins)
	}
	buf.PutLong(e.MaxId)
	buf.PutLong(e.MinId)
	buf.PutInt(e.Limit)
	return buf.Result()
}

func (с *Client) ChannelsGetAdminLog(params *ChannelsGetAdminLogParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsGetAdminLog")
	}

	resp, ok := data.(*ChannelsAdminLogResults)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsSetStickersParams struct {
	Channel    InputChannel    `validate:"required"`
	Stickerset InputStickerSet `validate:"required"`
}

func (e *ChannelsSetStickersParams) CRC() uint32 {
	return uint32(0xea8ca4f9)
}

func (e *ChannelsSetStickers) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Channel.Encode())
	buf.PutRawBytes(e.Stickerset.Encode())
	return buf.Result()
}

func (с *Client) ChannelsSetStickers(params *ChannelsSetStickersParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsSetStickers")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsReadMessageContentsParams struct {
	Channel InputChannel `validate:"required"`
	Id      []int32      `validate:"required"`
}

func (e *ChannelsReadMessageContentsParams) CRC() uint32 {
	return uint32(0xeab5dc38)
}

func (e *ChannelsReadMessageContents) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Channel.Encode())
	buf.PutVector(e.Id)
	return buf.Result()
}

func (с *Client) ChannelsReadMessageContents(params *ChannelsReadMessageContentsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsReadMessageContents")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsDeleteHistoryParams struct {
	Channel InputChannel `validate:"required"`
	MaxId   int32        `validate:"required"`
}

func (e *ChannelsDeleteHistoryParams) CRC() uint32 {
	return uint32(0xaf369d42)
}

func (e *ChannelsDeleteHistory) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Channel.Encode())
	buf.PutInt(e.MaxId)
	return buf.Result()
}

func (с *Client) ChannelsDeleteHistory(params *ChannelsDeleteHistoryParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsDeleteHistory")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsTogglePreHistoryHiddenParams struct {
	Channel InputChannel `validate:"required"`
	Enabled bool         `validate:"required"`
}

func (e *ChannelsTogglePreHistoryHiddenParams) CRC() uint32 {
	return uint32(0xeabbb94c)
}

func (e *ChannelsTogglePreHistoryHidden) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Channel.Encode())
	buf.PutBool(e.Enabled)
	return buf.Result()
}

func (с *Client) ChannelsTogglePreHistoryHidden(params *ChannelsTogglePreHistoryHiddenParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsTogglePreHistoryHidden")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsGetLeftChannelsParams struct {
	Offset int32 `validate:"required"`
}

func (e *ChannelsGetLeftChannelsParams) CRC() uint32 {
	return uint32(0x8341ecc0)
}

func (e *ChannelsGetLeftChannels) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Offset)
	return buf.Result()
}

func (с *Client) ChannelsGetLeftChannels(params *ChannelsGetLeftChannelsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsGetLeftChannels")
	}

	resp, ok := data.(MessagesChats)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsGetGroupsForDiscussionParams struct{}

func (e *ChannelsGetGroupsForDiscussionParams) CRC() uint32 {
	return uint32(0xf5dad378)
}

func (e *ChannelsGetGroupsForDiscussion) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) ChannelsGetGroupsForDiscussion() {
	data, err := c.MakeRequest(&ChannelsGetGroupsForDiscussionParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsGetGroupsForDiscussion")
	}

	resp, ok := data.(MessagesChats)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsSetDiscussionGroupParams struct {
	Broadcast InputChannel `validate:"required"`
	Group     InputChannel `validate:"required"`
}

func (e *ChannelsSetDiscussionGroupParams) CRC() uint32 {
	return uint32(0x40582bb2)
}

func (e *ChannelsSetDiscussionGroup) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Broadcast.Encode())
	buf.PutRawBytes(e.Group.Encode())
	return buf.Result()
}

func (с *Client) ChannelsSetDiscussionGroup(params *ChannelsSetDiscussionGroupParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsSetDiscussionGroup")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsEditCreatorParams struct {
	Channel  InputChannel          `validate:"required"`
	UserId   InputUser             `validate:"required"`
	Password InputCheckPasswordSRP `validate:"required"`
}

func (e *ChannelsEditCreatorParams) CRC() uint32 {
	return uint32(0x8f38cd1f)
}

func (e *ChannelsEditCreator) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Channel.Encode())
	buf.PutRawBytes(e.UserId.Encode())
	buf.PutRawBytes(e.Password.Encode())
	return buf.Result()
}

func (с *Client) ChannelsEditCreator(params *ChannelsEditCreatorParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsEditCreator")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsEditLocationParams struct {
	Channel  InputChannel  `validate:"required"`
	GeoPoint InputGeoPoint `validate:"required"`
	Address  string        `validate:"required"`
}

func (e *ChannelsEditLocationParams) CRC() uint32 {
	return uint32(0x58e63f6d)
}

func (e *ChannelsEditLocation) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Channel.Encode())
	buf.PutRawBytes(e.GeoPoint.Encode())
	buf.PutString(e.Address)
	return buf.Result()
}

func (с *Client) ChannelsEditLocation(params *ChannelsEditLocationParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsEditLocation")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsToggleSlowModeParams struct {
	Channel InputChannel `validate:"required"`
	Seconds int32        `validate:"required"`
}

func (e *ChannelsToggleSlowModeParams) CRC() uint32 {
	return uint32(0xedd49ef0)
}

func (e *ChannelsToggleSlowMode) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Channel.Encode())
	buf.PutInt(e.Seconds)
	return buf.Result()
}

func (с *Client) ChannelsToggleSlowMode(params *ChannelsToggleSlowModeParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsToggleSlowMode")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type ChannelsGetInactiveChannelsParams struct{}

func (e *ChannelsGetInactiveChannelsParams) CRC() uint32 {
	return uint32(0x11e831ee)
}

func (e *ChannelsGetInactiveChannels) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) ChannelsGetInactiveChannels() {
	data, err := c.MakeRequest(&ChannelsGetInactiveChannelsParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning ChannelsGetInactiveChannels")
	}

	resp, ok := data.(*MessagesInactiveChats)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type BotsSendCustomRequestParams struct {
	CustomMethod string    `validate:"required"`
	Params       *DataJSON `validate:"required"`
}

func (e *BotsSendCustomRequestParams) CRC() uint32 {
	return uint32(0xaa2769ed)
}

func (e *BotsSendCustomRequest) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.CustomMethod)
	buf.PutRawBytes(e.Params.Encode())
	return buf.Result()
}

func (с *Client) BotsSendCustomRequest(params *BotsSendCustomRequestParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning BotsSendCustomRequest")
	}

	resp, ok := data.(*DataJSON)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type BotsAnswerWebhookJSONQueryParams struct {
	QueryId int64     `validate:"required"`
	Data    *DataJSON `validate:"required"`
}

func (e *BotsAnswerWebhookJSONQueryParams) CRC() uint32 {
	return uint32(0xe6213f4d)
}

func (e *BotsAnswerWebhookJSONQuery) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.QueryId)
	buf.PutRawBytes(e.Data.Encode())
	return buf.Result()
}

func (с *Client) BotsAnswerWebhookJSONQuery(params *BotsAnswerWebhookJSONQueryParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning BotsAnswerWebhookJSONQuery")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type BotsSetBotCommandsParams struct {
	Commands []*BotCommand `validate:"required"`
}

func (e *BotsSetBotCommandsParams) CRC() uint32 {
	return uint32(0x805d46f6)
}

func (e *BotsSetBotCommands) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Commands)
	return buf.Result()
}

func (с *Client) BotsSetBotCommands(params *BotsSetBotCommandsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning BotsSetBotCommands")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type PaymentsGetPaymentFormParams struct {
	MsgId int32 `validate:"required"`
}

func (e *PaymentsGetPaymentFormParams) CRC() uint32 {
	return uint32(0x99f09745)
}

func (e *PaymentsGetPaymentForm) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.MsgId)
	return buf.Result()
}

func (с *Client) PaymentsGetPaymentForm(params *PaymentsGetPaymentFormParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning PaymentsGetPaymentForm")
	}

	resp, ok := data.(*PaymentsPaymentForm)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type PaymentsGetPaymentReceiptParams struct {
	MsgId int32 `validate:"required"`
}

func (e *PaymentsGetPaymentReceiptParams) CRC() uint32 {
	return uint32(0xa092a980)
}

func (e *PaymentsGetPaymentReceipt) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.MsgId)
	return buf.Result()
}

func (с *Client) PaymentsGetPaymentReceipt(params *PaymentsGetPaymentReceiptParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning PaymentsGetPaymentReceipt")
	}

	resp, ok := data.(*PaymentsPaymentReceipt)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type PaymentsValidateRequestedInfoParams struct {
	__flagsPosition struct{}              // flags param position `validate:"required"`
	Save            bool                  `flag:"0,encoded_in_bitflags"`
	MsgId           int32                 `validate:"required"`
	Info            *PaymentRequestedInfo `validate:"required"`
}

func (e *PaymentsValidateRequestedInfoParams) CRC() uint32 {
	return uint32(0x770a8e74)
}

func (e *PaymentsValidateRequestedInfo) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Save) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutInt(e.MsgId)
	buf.PutRawBytes(e.Info.Encode())
	return buf.Result()
}

func (с *Client) PaymentsValidateRequestedInfo(params *PaymentsValidateRequestedInfoParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning PaymentsValidateRequestedInfo")
	}

	resp, ok := data.(*PaymentsValidatedRequestedInfo)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type PaymentsSendPaymentFormParams struct {
	__flagsPosition  struct{}                // flags param position `validate:"required"`
	MsgId            int32                   `validate:"required"`
	RequestedInfoId  string                  `flag:"0"`
	ShippingOptionId string                  `flag:"1"`
	Credentials      InputPaymentCredentials `validate:"required"`
}

func (e *PaymentsSendPaymentFormParams) CRC() uint32 {
	return uint32(0x2b8879b3)
}

func (e *PaymentsSendPaymentForm) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.RequestedInfoId) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.ShippingOptionId) {
		flag |= 1 << 1
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutInt(e.MsgId)
	if !zero.IsZeroVal(e.RequestedInfoId) {
		buf.PutString(e.RequestedInfoId)
	}
	if !zero.IsZeroVal(e.ShippingOptionId) {
		buf.PutString(e.ShippingOptionId)
	}
	buf.PutRawBytes(e.Credentials.Encode())
	return buf.Result()
}

func (с *Client) PaymentsSendPaymentForm(params *PaymentsSendPaymentFormParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning PaymentsSendPaymentForm")
	}

	resp, ok := data.(PaymentsPaymentResult)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type PaymentsGetSavedInfoParams struct{}

func (e *PaymentsGetSavedInfoParams) CRC() uint32 {
	return uint32(0x227d824b)
}

func (e *PaymentsGetSavedInfo) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) PaymentsGetSavedInfo() {
	data, err := c.MakeRequest(&PaymentsGetSavedInfoParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning PaymentsGetSavedInfo")
	}

	resp, ok := data.(*PaymentsSavedInfo)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type PaymentsClearSavedInfoParams struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	Credentials     bool     `flag:"0,encoded_in_bitflags"`
	Info            bool     `flag:"1,encoded_in_bitflags"`
}

func (e *PaymentsClearSavedInfoParams) CRC() uint32 {
	return uint32(0xd83d70c1)
}

func (e *PaymentsClearSavedInfo) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Credentials) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Info) {
		flag |= 1 << 1
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	return buf.Result()
}

func (с *Client) PaymentsClearSavedInfo(params *PaymentsClearSavedInfoParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning PaymentsClearSavedInfo")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type PaymentsGetBankCardDataParams struct {
	Number string `validate:"required"`
}

func (e *PaymentsGetBankCardDataParams) CRC() uint32 {
	return uint32(0x2e79d779)
}

func (e *PaymentsGetBankCardData) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Number)
	return buf.Result()
}

func (с *Client) PaymentsGetBankCardData(params *PaymentsGetBankCardDataParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning PaymentsGetBankCardData")
	}

	resp, ok := data.(*PaymentsBankCardData)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type StickersCreateStickerSetParams struct {
	__flagsPosition struct{}               // flags param position `validate:"required"`
	Masks           bool                   `flag:"0,encoded_in_bitflags"`
	Animated        bool                   `flag:"1,encoded_in_bitflags"`
	UserId          InputUser              `validate:"required"`
	Title           string                 `validate:"required"`
	ShortName       string                 `validate:"required"`
	Thumb           InputDocument          `flag:"2"`
	Stickers        []*InputStickerSetItem `validate:"required"`
}

func (e *StickersCreateStickerSetParams) CRC() uint32 {
	return uint32(0xf1036780)
}

func (e *StickersCreateStickerSet) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Masks) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Animated) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Thumb) {
		flag |= 1 << 2
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.UserId.Encode())
	buf.PutString(e.Title)
	buf.PutString(e.ShortName)
	if !zero.IsZeroVal(e.Thumb) {
		buf.PutRawBytes(e.Thumb.Encode())
	}
	buf.PutVector(e.Stickers)
	return buf.Result()
}

func (с *Client) StickersCreateStickerSet(params *StickersCreateStickerSetParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning StickersCreateStickerSet")
	}

	resp, ok := data.(*MessagesStickerSet)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type StickersRemoveStickerFromSetParams struct {
	Sticker InputDocument `validate:"required"`
}

func (e *StickersRemoveStickerFromSetParams) CRC() uint32 {
	return uint32(0xf7760f51)
}

func (e *StickersRemoveStickerFromSet) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Sticker.Encode())
	return buf.Result()
}

func (с *Client) StickersRemoveStickerFromSet(params *StickersRemoveStickerFromSetParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning StickersRemoveStickerFromSet")
	}

	resp, ok := data.(*MessagesStickerSet)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type StickersChangeStickerPositionParams struct {
	Sticker  InputDocument `validate:"required"`
	Position int32         `validate:"required"`
}

func (e *StickersChangeStickerPositionParams) CRC() uint32 {
	return uint32(0xffb6d4ca)
}

func (e *StickersChangeStickerPosition) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Sticker.Encode())
	buf.PutInt(e.Position)
	return buf.Result()
}

func (с *Client) StickersChangeStickerPosition(params *StickersChangeStickerPositionParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning StickersChangeStickerPosition")
	}

	resp, ok := data.(*MessagesStickerSet)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type StickersAddStickerToSetParams struct {
	Stickerset InputStickerSet      `validate:"required"`
	Sticker    *InputStickerSetItem `validate:"required"`
}

func (e *StickersAddStickerToSetParams) CRC() uint32 {
	return uint32(0x8653febe)
}

func (e *StickersAddStickerToSet) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Stickerset.Encode())
	buf.PutRawBytes(e.Sticker.Encode())
	return buf.Result()
}

func (с *Client) StickersAddStickerToSet(params *StickersAddStickerToSetParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning StickersAddStickerToSet")
	}

	resp, ok := data.(*MessagesStickerSet)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type StickersSetStickerSetThumbParams struct {
	Stickerset InputStickerSet `validate:"required"`
	Thumb      InputDocument   `validate:"required"`
}

func (e *StickersSetStickerSetThumbParams) CRC() uint32 {
	return uint32(0x9a364e30)
}

func (e *StickersSetStickerSetThumb) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Stickerset.Encode())
	buf.PutRawBytes(e.Thumb.Encode())
	return buf.Result()
}

func (с *Client) StickersSetStickerSetThumb(params *StickersSetStickerSetThumbParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning StickersSetStickerSetThumb")
	}

	resp, ok := data.(*MessagesStickerSet)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type PhoneGetCallConfigParams struct{}

func (e *PhoneGetCallConfigParams) CRC() uint32 {
	return uint32(0x55451fa9)
}

func (e *PhoneGetCallConfig) Encode() []byte {
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (с *Client) PhoneGetCallConfig() {
	data, err := c.MakeRequest(&PhoneGetCallConfigParams{})
	if err != nil {
		return nil, errors.Wrap(err, "sedning PhoneGetCallConfig")
	}

	resp, ok := data.(*DataJSON)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type PhoneRequestCallParams struct {
	__flagsPosition struct{}           // flags param position `validate:"required"`
	Video           bool               `flag:"0,encoded_in_bitflags"`
	UserId          InputUser          `validate:"required"`
	RandomId        int32              `validate:"required"`
	GAHash          []byte             `validate:"required"`
	Protocol        *PhoneCallProtocol `validate:"required"`
}

func (e *PhoneRequestCallParams) CRC() uint32 {
	return uint32(0x42ff96ed)
}

func (e *PhoneRequestCall) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Video) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.UserId.Encode())
	buf.PutInt(e.RandomId)
	buf.PutMessage(e.GAHash)
	buf.PutRawBytes(e.Protocol.Encode())
	return buf.Result()
}

func (с *Client) PhoneRequestCall(params *PhoneRequestCallParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning PhoneRequestCall")
	}

	resp, ok := data.(*PhonePhoneCall)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type PhoneAcceptCallParams struct {
	Peer     *InputPhoneCall    `validate:"required"`
	GB       []byte             `validate:"required"`
	Protocol *PhoneCallProtocol `validate:"required"`
}

func (e *PhoneAcceptCallParams) CRC() uint32 {
	return uint32(0x3bd2b4a0)
}

func (e *PhoneAcceptCall) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutMessage(e.GB)
	buf.PutRawBytes(e.Protocol.Encode())
	return buf.Result()
}

func (с *Client) PhoneAcceptCall(params *PhoneAcceptCallParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning PhoneAcceptCall")
	}

	resp, ok := data.(*PhonePhoneCall)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type PhoneConfirmCallParams struct {
	Peer           *InputPhoneCall    `validate:"required"`
	GA             []byte             `validate:"required"`
	KeyFingerprint int64              `validate:"required"`
	Protocol       *PhoneCallProtocol `validate:"required"`
}

func (e *PhoneConfirmCallParams) CRC() uint32 {
	return uint32(0x2efe1722)
}

func (e *PhoneConfirmCall) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutMessage(e.GA)
	buf.PutLong(e.KeyFingerprint)
	buf.PutRawBytes(e.Protocol.Encode())
	return buf.Result()
}

func (с *Client) PhoneConfirmCall(params *PhoneConfirmCallParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning PhoneConfirmCall")
	}

	resp, ok := data.(*PhonePhoneCall)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type PhoneReceivedCallParams struct {
	Peer *InputPhoneCall `validate:"required"`
}

func (e *PhoneReceivedCallParams) CRC() uint32 {
	return uint32(0x17d54f61)
}

func (e *PhoneReceivedCall) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

func (с *Client) PhoneReceivedCall(params *PhoneReceivedCallParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning PhoneReceivedCall")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type PhoneDiscardCallParams struct {
	__flagsPosition struct{}               // flags param position `validate:"required"`
	Video           bool                   `flag:"0,encoded_in_bitflags"`
	Peer            *InputPhoneCall        `validate:"required"`
	Duration        int32                  `validate:"required"`
	Reason          PhoneCallDiscardReason `validate:"required"`
	ConnectionId    int64                  `validate:"required"`
}

func (e *PhoneDiscardCallParams) CRC() uint32 {
	return uint32(0xb2cbc1c0)
}

func (e *PhoneDiscardCall) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Video) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.Duration)
	buf.PutRawBytes(e.Reason.Encode())
	buf.PutLong(e.ConnectionId)
	return buf.Result()
}

func (с *Client) PhoneDiscardCall(params *PhoneDiscardCallParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning PhoneDiscardCall")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type PhoneSetCallRatingParams struct {
	__flagsPosition struct{}        // flags param position `validate:"required"`
	UserInitiative  bool            `flag:"0,encoded_in_bitflags"`
	Peer            *InputPhoneCall `validate:"required"`
	Rating          int32           `validate:"required"`
	Comment         string          `validate:"required"`
}

func (e *PhoneSetCallRatingParams) CRC() uint32 {
	return uint32(0x59ead627)
}

func (e *PhoneSetCallRating) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.UserInitiative) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.Rating)
	buf.PutString(e.Comment)
	return buf.Result()
}

func (с *Client) PhoneSetCallRating(params *PhoneSetCallRatingParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning PhoneSetCallRating")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type PhoneSaveCallDebugParams struct {
	Peer  *InputPhoneCall `validate:"required"`
	Debug *DataJSON       `validate:"required"`
}

func (e *PhoneSaveCallDebugParams) CRC() uint32 {
	return uint32(0x277add7e)
}

func (e *PhoneSaveCallDebug) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutRawBytes(e.Debug.Encode())
	return buf.Result()
}

func (с *Client) PhoneSaveCallDebug(params *PhoneSaveCallDebugParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning PhoneSaveCallDebug")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type PhoneSendSignalingDataParams struct {
	Peer *InputPhoneCall `validate:"required"`
	Data []byte          `validate:"required"`
}

func (e *PhoneSendSignalingDataParams) CRC() uint32 {
	return uint32(0xff7a9383)
}

func (e *PhoneSendSignalingData) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutMessage(e.Data)
	return buf.Result()
}

func (с *Client) PhoneSendSignalingData(params *PhoneSendSignalingDataParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning PhoneSendSignalingData")
	}

	resp, ok := data.(Bool)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type LangpackGetLangPackParams struct {
	LangPack string `validate:"required"`
	LangCode string `validate:"required"`
}

func (e *LangpackGetLangPackParams) CRC() uint32 {
	return uint32(0xf2f2330a)
}

func (e *LangpackGetLangPack) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.LangPack)
	buf.PutString(e.LangCode)
	return buf.Result()
}

func (с *Client) LangpackGetLangPack(params *LangpackGetLangPackParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning LangpackGetLangPack")
	}

	resp, ok := data.(*LangPackDifference)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type LangpackGetStringsParams struct {
	LangPack string   `validate:"required"`
	LangCode string   `validate:"required"`
	Keys     []string `validate:"required"`
}

func (e *LangpackGetStringsParams) CRC() uint32 {
	return uint32(0xefea3803)
}

func (e *LangpackGetStrings) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.LangPack)
	buf.PutString(e.LangCode)
	buf.PutVector(e.Keys)
	return buf.Result()
}

func (с *Client) LangpackGetStrings(params *LangpackGetStringsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning LangpackGetStrings")
	}

	resp, ok := data.(LangPackString)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type LangpackGetDifferenceParams struct {
	LangPack    string `validate:"required"`
	LangCode    string `validate:"required"`
	FromVersion int32  `validate:"required"`
}

func (e *LangpackGetDifferenceParams) CRC() uint32 {
	return uint32(0xcd984aa5)
}

func (e *LangpackGetDifference) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.LangPack)
	buf.PutString(e.LangCode)
	buf.PutInt(e.FromVersion)
	return buf.Result()
}

func (с *Client) LangpackGetDifference(params *LangpackGetDifferenceParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning LangpackGetDifference")
	}

	resp, ok := data.(*LangPackDifference)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type LangpackGetLanguagesParams struct {
	LangPack string `validate:"required"`
}

func (e *LangpackGetLanguagesParams) CRC() uint32 {
	return uint32(0x42c6978f)
}

func (e *LangpackGetLanguages) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.LangPack)
	return buf.Result()
}

func (с *Client) LangpackGetLanguages(params *LangpackGetLanguagesParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning LangpackGetLanguages")
	}

	resp, ok := data.(*LangPackLanguage)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type LangpackGetLanguageParams struct {
	LangPack string `validate:"required"`
	LangCode string `validate:"required"`
}

func (e *LangpackGetLanguageParams) CRC() uint32 {
	return uint32(0x6a596502)
}

func (e *LangpackGetLanguage) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.LangPack)
	buf.PutString(e.LangCode)
	return buf.Result()
}

func (с *Client) LangpackGetLanguage(params *LangpackGetLanguageParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning LangpackGetLanguage")
	}

	resp, ok := data.(*LangPackLanguage)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type FoldersEditPeerFoldersParams struct {
	FolderPeers []*InputFolderPeer `validate:"required"`
}

func (e *FoldersEditPeerFoldersParams) CRC() uint32 {
	return uint32(0x6847d0ab)
}

func (e *FoldersEditPeerFolders) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.FolderPeers)
	return buf.Result()
}

func (с *Client) FoldersEditPeerFolders(params *FoldersEditPeerFoldersParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning FoldersEditPeerFolders")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type FoldersDeleteFolderParams struct {
	FolderId int32 `validate:"required"`
}

func (e *FoldersDeleteFolderParams) CRC() uint32 {
	return uint32(0x1c295881)
}

func (e *FoldersDeleteFolder) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.FolderId)
	return buf.Result()
}

func (с *Client) FoldersDeleteFolder(params *FoldersDeleteFolderParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning FoldersDeleteFolder")
	}

	resp, ok := data.(Updates)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type StatsGetBroadcastStatsParams struct {
	__flagsPosition struct{}     // flags param position `validate:"required"`
	Dark            bool         `flag:"0,encoded_in_bitflags"`
	Channel         InputChannel `validate:"required"`
}

func (e *StatsGetBroadcastStatsParams) CRC() uint32 {
	return uint32(0xab42441a)
}

func (e *StatsGetBroadcastStats) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Dark) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Channel.Encode())
	return buf.Result()
}

func (с *Client) StatsGetBroadcastStats(params *StatsGetBroadcastStatsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning StatsGetBroadcastStats")
	}

	resp, ok := data.(*StatsBroadcastStats)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type StatsLoadAsyncGraphParams struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	Token           string   `validate:"required"`
	X               int64    `flag:"0"`
}

func (e *StatsLoadAsyncGraphParams) CRC() uint32 {
	return uint32(0x621d5fa0)
}

func (e *StatsLoadAsyncGraph) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.X) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutString(e.Token)
	if !zero.IsZeroVal(e.X) {
		buf.PutLong(e.X)
	}
	return buf.Result()
}

func (с *Client) StatsLoadAsyncGraph(params *StatsLoadAsyncGraphParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning StatsLoadAsyncGraph")
	}

	resp, ok := data.(StatsGraph)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}

type StatsGetMegagroupStatsParams struct {
	__flagsPosition struct{}     // flags param position `validate:"required"`
	Dark            bool         `flag:"0,encoded_in_bitflags"`
	Channel         InputChannel `validate:"required"`
}

func (e *StatsGetMegagroupStatsParams) CRC() uint32 {
	return uint32(0xdcdf8607)
}

func (e *StatsGetMegagroupStats) Encode() []byte {
	err := validator.New().Struct(e)
	dry.PanicIfErr(err)

	var flag uint32
	if !zero.IsZeroVal(e.Dark) {
		flag |= 1 << 0
	}
	buf := mtproto.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Channel.Encode())
	return buf.Result()
}

func (с *Client) StatsGetMegagroupStats(params *StatsGetMegagroupStatsParams) {
	data, err := c.MakeRequest(params)
	if err != nil {
		return nil, errors.Wrap(err, "sedning StatsGetMegagroupStats")
	}

	resp, ok := data.(*StatsMegagroupStats)
	if !ok {
		panic("got invalid response type: " + reflect.TypeOf(data).String())
	}

	return resp, nil
}
